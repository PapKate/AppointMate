@using static MeetBase.Blazor.PaletteColors
@using static MeetBase.Blazor.Personalization
@using static MeetBase.Blazor.CssVariables

@namespace MeetCore

@if(Layout is not null)
{
    <div class="layoutRoomContainer @mLayoutImageTheme" style="@BackgroundVariable.SetCssColor(Layout.Color.IsNullOrEmpty() ? Amber.HexToRGBA(0.5) : Layout.Color.HexToRGBA(0.5))">
        @if(Layout.DisplayTheme != ImageDisplayTheme.Right)
        {
            <div class="@(Layout.DisplayTheme == ImageDisplayTheme.Center ? "layoutRoomImageFullContainer" : "layoutRoomImageContainer")">
                <img class="@(Layout.DisplayTheme == ImageDisplayTheme.Center ? "layoutRoomImageFull" : "layoutRoomImage")" src="@Layout.ImageUrl?.ToString()" alt="@Layout.Name" />
            </div>
        }
        <div class="layoutRoomTextContainer @(Layout.DisplayTheme == ImageDisplayTheme.Center ? "layoutRoomTextCenterContainer" : string.Empty)">
            <h3>@Layout.Name</h3>
            @((MarkupString)Markdig.Markdown.ToHtml(Layout.Note))
        </div>

        @if (Layout.DisplayTheme == ImageDisplayTheme.Right)
        {
            <div class="layoutRoomImageContainer layoutRoomImageRightContainer">
                <img class="layoutRoomImage" src="@Layout.ImageUrl?.ToString()" alt="@Layout.Name" />
            </div>
        }

        @if(IsEditable)
        {
            <EditToOptionsButton Alignment="Alignment.Vertical"
                                 HasOverlay="true"
                                 EditButton="@(new(White.HexToRGBA(0.6), Gray, IconPaths.PencilBoxMultipleOutlinePath))"
                                 OptionButtons="@(new List<OptionButton>()
                                                {
                                                    new(White.HexToRGBA(0.6), Orange, IconPaths.PencilOutlinePath, EventCallback.Factory.Create(this, () => EditLayoutRoom())),
                                                    new(White.HexToRGBA(0.6), Red, IconPaths.TrashCanOutlinePath, EventCallback.Factory.Create(this, () => DeleteLayoutRoom()))
                                                })"/>
        }
    </div>
}

<style>

    .layoutRoomContainer {
        position: relative;
        width: 100%;
        height: auto;
        display: grid;
        justify-items: self-end;
        align-items: center;
        background-color: @BackgroundVariable.GetCssVariable();
    }

    .layoutRoomTextContainer {
        padding: @LargePadding @XXLargePadding @LargePadding @XXLargePadding;
    }

    .layoutRoomTextCenterContainer {
        justify-self: center;
    }

    .layoutRoomImageContainer {
        position: relative;
        width: 100%;
        height: auto;
        display: flex;
    }

    .layoutRoomImageRightContainer {
        justify-content: flex-end;
    }

    .layoutRoomImageFullContainer {
        position: relative;
        width: 100%;
    }

    .layoutRoomImage {
        width: 100%;
        max-width: 500px;
        height: 100%;
        max-height: 340px;
        object-fit: contain;
        border-radius: @VeryLargeBorderRadius;
    }

    .layoutRoomImageFull {
        width: 100%;
        height: 100%;
        object-fit: fill;
    }

    .layoutRoomCenterContainer {
        grid-template-columns: 1fr;
        padding: 0;
        text-align: center;
    }

    .layoutRoomLeftContainer {
        grid-template-columns: 3fr 2fr;
        justify-content: flex-start;
        padding: @XXLargePadding;
        text-align: right;
    }

    .layoutRoomRightContainer {
        grid-template-columns: 2fr 3fr;
        justify-content: flex-end;
        padding: @XXLargePadding;
        text-align: left;
    }

    .editButtonContainer {
        position: absolute;
        top: 1rem;
        right: 1rem;
        width: 3rem;
        height: 3rem;
        padding: 8px;
        cursor: pointer;
    }

</style>