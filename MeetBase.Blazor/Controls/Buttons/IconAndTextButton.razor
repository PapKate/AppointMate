@inherits BaseIconAndTextButton

@using static MeetBase.Blazor.PaletteColors
@using static MeetBase.Blazor.Personalization
@using static MeetBase.Blazor.CssVariables
@using static MeetBase.Blazor.CssVariableHelpers

@namespace MeetBase.Blazor


<button disabled="@(!IsEnabled)" class="borderControl baseButton typography @CssClasses" id="@Id"
        @onmouseover="@OnMouseOver"
        @onmouseout="@OnMouseOut"
        @onmousedown="OnMouseDown"
        @onmouseup="OnMouseUp"
        @onclick="@(async (e) => { await OnBaseButtonClick(e); })"
        style="@SetBorderControlCssVariables(Width, Height, Background, Foreground, BoxShadow, BorderRadius, BorderStyle, BorderBrush, BorderThickness)
               @SetTypographyCssVariables(FontFamily, FontSize, FontWeight)
               @Style">
   <div class="buttonAnimationContainer">
        <div class="@mButtonAnimation"
             style="background-color:@(!Foreground.IsHexValue() ? White.HexToRGBA(0.4) : Foreground?.HexToRGBA(0.4));
                    top: @mTop; left: @mLeft;">
        </div>
    </div>
    <div class="buttonContent" style="@FlexDirectionVariable.SetCssVariable((ControlHelpers.SetFlexDirectionForContainer(IconPlacement)));">
        @if(VectorSource is not null)
        {
            <div class="buttonIcon @(IconPlacement == ContentPlacement.Bottom || IconPlacement == ContentPlacement.Top ? "buttonIconVertical" : string.Empty)">
                <VectorIcon Color="@Foreground" VectorSource="@VectorSource" />
            </div>
        }
        
        @if(!Text.IsNullOrEmpty())
        {
            <span class="buttonText">
                @Text
            </span>
        }
        @ChildContent
    </div>
</button>


<style>

    
</style>

