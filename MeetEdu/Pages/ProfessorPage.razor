@page "/professors/{Id}"

@using static MeetBase.Blazor.PaletteColors
@using static MeetBase.Blazor.CssVariables

@using static MeetBase.Blazor.Personalization

@namespace MeetEdu

<PageTitle>@MeetEduConstants.AppName @Model?.User?.FirstName @Model?.User?.LastName</PageTitle>

<PageContainer Id="staffMemberPageAppContainer">
    
    @if (Model is not null && Model.User is not null)
    {
        <div class="staffMemberPageContainer">
            <div class="staffMemberContainer" style="@BorderBrushVariable.SetCssColor(Model.User.Color)">

                <div class="staffMemberRibbonContainer" style="@BackgroundVariable.SetCssColor(Model.User.Color) @ForegroundVariable.SetCssColor(Model.User.Color.DarkOrWhite())">
                    <div></div>
                    <div class="staffMemberRibbon">
                        <div class="staffMemberRibbonInfoContainer">
                            <span class="staffMemberRibbonInfo">@Model.User.LastName @Model.User.FirstName</span>
                            <span class="staffMemberRibbonInfoDetails">@Model.Rank.ToString().BreakWords()</span>
                        </div>
                        <IconButton BackColor="transparent"
                                    ForeColor="@Model.User.Color.DarkOrWhite()"
                                    VectorSource="@IconPaths.HeartOutlinePath"
                                    HasAnimation="false"
                                    BoxShadow="none"
                                    Style="display:none;"
                                    CssClasses="professorRibbonHeartContainer" />
                    </div>
                </div>

                <div class="modelInfoContainer" style="@ForegroundVariable.SetCssColor(Model.User.Color)">
                    <div class="modelImageAndContactContainer">
                        <div class="modelImageContainer">
                            <ImageWithFallbackVector CssClasses="staffMemberImage"
                                                   ImageSource="@Model.User!.ImageUrl?.ToString()"
                                                   AspectRatio="1 / 1"
                                                   VectorType="@typeof(AvatarVector)"
                                                   FallbackIconColor="@Model.User.Color"
                                                   FallbackIconMargin="1rem"
                                                   AlternateText="@Model.User.Username" />

                        </div>
                        <div class="modelContactContainer">
                            <div class="modelContactImage">
                                <MapMarkerVector Color="@Model.User.Color" />
                            </div>
                            <span class="modelContactValue">@(Model.User.Location is not null ? $"{Model.User.Location.Address}, {Model.User.Location.City}, {Model.User.Location.Postcode}" : "-")</span>

                            <div class="modelContactImage">
                                <CallVector Color="@Model.User.Color" />
                            </div>
                            <span class="modelContactValue">+@Model.User.PhoneNumber</span>

                            <div class="modelContactImage">
                                <EmailVector Color="@Model.User.Color" />
                            </div>
                            <span class="modelContactValue">@Model.User.Email</span>

                        </div>
                    </div>
                    <div class="staffMemberPositionContainer">
                        <span class="modelInfoTitle">Department</span>
                        <span class="modelInfoText">@Model.Department!.Name</span>
                    </div>
                    @if (!Model.Websites.IsNullOrEmpty())
                    {
                        <div id="professorWebsites" class="staffMemberPositionContainer">
                            <span class="modelInfoTitle">Websites</span>
                            @foreach (var website in Model.Websites)
                            {
                                <span class="modelInfoText modelWebsiteName">
                                    <a href="@website.Link" target="_blank" rel="noopener noreferrer" style="@ForegroundVariable.SetCssColor(Model.User.Color)">@website.Name</a>
                                </span>
                            }
                        </div>
                    }
                    <div class="modelWeeklyScheduleContainer">
                        <div class="modelWeeklySchedule">
                            <span class="modelWeeklyScheduleTitle">Office hours</span>
                        </div>
                        @if (Model.WeeklySchedule is not null)
                        {
                            @foreach (var schedule in Model.WeeklySchedule.WeeklyHours.OrderBy(x => x.DayOfWeek).GroupBy(x => x.DayOfWeek))
                            {
                                <div class="modelWeeklyScheduleDayContainer">
                                    <span class="modelWeeklyScheduleDay">@schedule.Key</span>
                                    @foreach (var timespan in schedule.OrderBy(x => x.Start))
                                    {
                                        <span class="modelWeeklyScheduleTime">@timespan.Start.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat) - @timespan.End.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat)</span>
                                    }
                                </div>
                            }
                        }
                        <span class="modelWeeklyScheduleNote">@Model.WeeklySchedule?.Note</span>
                    </div>
                </div>

                <div class="staffMemberPreviewMapContainer">
                    <div id="@Model.Id" class="staffMemberPreviewMap"></div>
                </div>
            </div>

            <div class="staffMemberQuoteContainer">
                <MudDivider DividerType="DividerType.Middle" Class="staffMemberPageDivider" />
                @if (!Model.Quote.IsNullOrEmpty())
                {
                    <span>"@Model.Quote"</span>
                    <MudDivider DividerType="DividerType.Middle" Class="staffMemberPageDivider" />
                }
            </div>

            <div class="professorResearchContainer">
                <span class="professorResearchTitle" style="@ForegroundVariable.SetCssColor(Model.User.Color)">Research interests</span>
                <MarkdownBlock Text="@Model.ResearchInterests" CssClass="textMarkDownContainer" />
            </div>
            
            @if(Model.WeeklySchedule is not null)
            {
                <span class="sectionHeader">Calendar</span>
                <div class="staffMemberScheduleContainer">
                    <Schedule WeeklySchedule="@Model.WeeklySchedule"
                              Lectures="@Model.Lectures"
                              PointerColor="@PaletteColors.Green"
                              IsEditable="false" />
                </div>
            }

            @if (!mLayouts.IsNullOrEmpty())
            {
                <div class="departmentPageLayoutSectionContainer">
                    <span class="sectionHeader">Office Layouts</span>
                    <div class="departmentPageLayoutsContainer">
                        @foreach (var departmentLayout in mLayouts)
                        {
                            <LayoutPresenter Model="@departmentLayout" />
                        }
                    </div>
                </div>
            }
            @if (Model.ContactMessageTemplate is not null)
            {
                <div class="departmentPageContactSectionContainer">
                    <span class="sectionHeader">Contact</span>
                    <div class="sectionDescription">
                        @Model.ContactMessageTemplate?.Description
                    </div>
                    <ProfessorContactForm FormTemplate="Model.ContactMessageTemplate" Professor="@Model" AppointmentRules="@mAppointmentRules"/>
                </div>
            }

        </div>
    }
</PageContainer>

<style>
    #staffMemberPageAppContainer {
        padding-bottom: 0;
    }

    .sectionHeader {
        background: @Model?.User?.Color.NormalizedColor();
        color: @Model?.User?.Color.DarkOrWhite().NormalizedColor();
    }

    .modelImageAndContactContainer {
        top: -1rem;
    }

    .professorResearchContainer {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: @VeryLargeGap;
        padding: @XXLargePadding;
    }

    .professorResearchTitle {
        position: relative;
        color: @ForegroundVariable.GetCssVariable();
        font-size: 112%;
        font-weight: 700;
    }

    .modelWebsiteName {
        grid-column-start: 2;
        font-weight: 700;
    }

    .staffMemberPageContainer {
        border: 1px solid @LightGray.NormalizedColor();
    }

    .staffMemberPageDivider {
        margin: 0 1rem;
    }

    .professorRibbonHeartContainer {
        position: relative;
        width: 2rem;
        height: 2rem;
        padding: 0;
    }

    .staffMemberPreviewMapContainer {
        grid-row-start: 1;
        grid-column-start: 2;
        grid-column-end: 3;
        position: relative;
        margin-top: 78px;
        width: 100%;
        height: fit-content;
        display: flex;
        padding: @LargePadding;
        z-index: 1;
        align-self: center;
    }

    .staffMemberPreviewMap {
        position: relative;
        width: 100%;
        height: 320px;
        border-radius: @LargeBorderRadius;
        border: solid 1px @LightGray.NormalizedColor();
    }

    #professorWebsites {
        gap: 0;
    }

</style>

