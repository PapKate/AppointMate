<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MeetEdu</name>
    </assembly>
    <members>
        <member name="T:MeetEdu.SearchBar">
            <summary>
            The search bar component
            </summary>
        </member>
        <member name="F:MeetEdu.SearchBar.mIsSearchForDepartments">
            <summary>
            The member of the <see cref="P:MeetEdu.SearchBar.IsSearchForDepartments"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.SearchBar.mSearchCategory">
            <summary>
            The search category
            </summary>
        </member>
        <member name="F:MeetEdu.SearchBar.mSearchIcon">
            <summary>
            The search icon
            </summary>
        </member>
        <member name="F:MeetEdu.SearchBar.mSearchBackColor">
            <summary>
            The search back color
            </summary>
        </member>
        <member name="P:MeetEdu.SearchBar.Text">
            <summary>
            The search text
            </summary>
        </member>
        <member name="P:MeetEdu.SearchBar.IsSearchForDepartments">
            <summary>
            A flag indicating whether the search regarding departments or not
            </summary>
        </member>
        <member name="M:MeetEdu.SearchBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.SearchBar.OnTextChanged(System.String)">
            <summary>
            Handles the text change
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="P:MeetEdu.SearchBar.TextChanged">
            <summary>
            Fires when the <see cref="P:MeetEdu.SearchBar.Text"/> is changed
            </summary>
        </member>
        <member name="T:MeetEdu.UniversityBox">
            <summary>
            The University display box
            </summary>
        </member>
        <member name="P:MeetEdu.UniversityBox.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:MeetEdu.UniversityBox.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="P:MeetEdu.UniversityBox.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="M:MeetEdu.UniversityBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.MeetEduConstants">
            <summary>
            The constants for the MeetEdu app
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.HostURL">
            <summary>
            The host URL
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.AppName">
            <summary>
            The app name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.Departments">
            <summary>
            The departments 
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.Layouts">
            <summary>
            The department layouts
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.PopularSearches">
            <summary>
            Popular searches
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.Explorer">
            <summary>
            Explorer
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.MyAccount">
            <summary>
            My account
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.Appointments">
            <summary>
            Appointments
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.Favorites">
            <summary>
            Favorites
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.LogIn">
            <summary>
            Log in
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.LogOut">
            <summary>
            Log out
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduConstants.Faculty">
            <summary>
            Faculty
            </summary>
        </member>
        <member name="T:MeetEdu.MeetEduWebServerConstants">
            <summary>
            Web server constants related to the MeetEdu application
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.NoCompaniesWereFoundWithTheSpecifiedIdsErrorMessage">
            <summary>
            Error message indicating no companies were found with the specified ids
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.NoSessionWasCreatedErrorMessage">
            <summary>
            Error message indicating invalid registration credentials
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.InvalidLogInCredentialsErrorMessage">
            <summary>
            Error message indicating an invalid username or an invalid password
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.InvalidRegistrationCredentialsErrorMessage">
            <summary>
            Error message indicating invalid registration credentials
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.InsufficientCustomerPointsErrorMessage">
            <summary>
            Error message indicating insufficient customer points
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.NoCustomerIdSpecifiedInTheRequestErrorMessage">
            <summary>
            Error message indicating no customer id was specified
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.NoAppointmentTemplateIdSpecifiedInTheRequestErrorMessage">
            <summary>
            Error message indicating no appointment template id was specified
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.NoServiceIdSpecifiedInTheRequestErrorMessage">
            <summary>
            Error message indicating no service id was specified
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.TheCustomerServicePurchasedAmountCanNotBeSetToLessThanThePaidAmountErrorMessage">
            <summary>
            Error message indicating that the purchased amount of a customer service can not be set to less than the paid amount
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduWebServerConstants.TheCustomerServicePurchasedAmountCanNotBeSetToLessThanTheAmountOfTheScheduledPaymentsErrorMessage">
            <summary>
            Error message indicating that the purchased amount of a customer service can not be set to less than the amount of the scheduled payments
            </summary>
        </member>
        <member name="T:MeetEdu.MeetCoreController">
            <summary>
            Controller used for handing the requests related to a MeetCore related application
            </summary>
        </member>
        <member name="P:MeetEdu.MeetCoreController.UniversityId">
            <summary>
            The university id
            </summary>
        </member>
        <member name="P:MeetEdu.MeetCoreController.DepartmentId">
            <summary>
            The department id
            </summary>
        </member>
        <member name="M:MeetEdu.MeetCoreController.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MeetCoreController.RegisterUserAsync(MeetBase.Web.UserRequestModel)">
            <summary>
            Registers a user
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.LoginAsync(MeetBase.Web.LogInRequestModel)">
            <summary>
            Validates the user credentials sent by the user and returns the user
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.ResetUserPasswordAsync(MeetBase.Web.ResetPasswordRequestModel)">
            <summary>
            Resets the user password
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddUserAsync(MeetBase.Web.UserRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a university
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateUserAsync(System.String,MeetBase.Web.UserRequestModel)">
            <summary>
            Updates the user with the specified <paramref name="userId"/>
            </summary>
            <param name="userId">The id</param>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteUserAsync(System.String)">
            <summary>
            Deletes the user with the specified <paramref name="userId"/>
            </summary>
            <param name="userId">The id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetUniversitiesAsync(MeetBase.Web.APIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the universities
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddUniversityAsync(MeetBase.Web.UniversityRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a university
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetUniversityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the university with the specified <paramref name="universityId"/>
            </summary>
            <param name="universityId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateUniversityAsync(System.String,MeetBase.Web.UniversityRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the university with the specified <paramref name="universityId"/>
            </summary>
            <param name="universityId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteUniversityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the university with the specified <paramref name="universityId"/>
            </summary>
            <param name="universityId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetUniversityLabelsAsync(MeetBase.Web.APIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the university labels
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddUniversityLabelAsync(MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a university label
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetUniversityLabelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the university label with the specified <paramref name="universityLabelId"/>
            </summary>
            <param name="universityLabelId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateUniversityLabelAsync(System.String,MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the university label with the specified <paramref name="universityLabelId"/>
            </summary>
            <param name="universityLabelId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteUniversityLabelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the university label with the specified <paramref name="universityLabelId"/>
            </summary>
            <param name="universityLabelId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentsAsync(MeetBase.Web.DepartmentAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the departments
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddDepartmentAsync(MeetBase.Web.DepartmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a department
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the department with the specified <paramref name="departmentId"/>
            </summary>
            <param name="departmentId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateDepartmentAsync(System.String,MeetBase.Web.DepartmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the department with the specified <paramref name="departmentId"/>
            </summary>
            <param name="departmentId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteDepartmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the department with the specified <paramref name="departmentId"/>
            </summary>
            <param name="departmentId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentLayoutsAsync(MeetBase.Web.DepartmentRelatedAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the department layouts
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddDepartmentLayoutAsync(MeetBase.Web.DepartmentLayoutRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a department layout
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentLayoutAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the department layout with the specified <paramref name="departmentLayoutId"/>
            </summary>
            <param name="departmentLayoutId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateDepartmentLayoutAsync(System.String,MeetBase.Web.DepartmentLayoutRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the department layout with the specified <paramref name="departmentLayoutId"/>
            </summary>
            <param name="departmentLayoutId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteDepartmentLayoutAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the department layout with the specified <paramref name="departmentLayoutId"/>
            </summary>
            <param name="departmentLayoutId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.SetDepartmentLayoutImageAsync(System.String,Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
            Creates a department layout
            </summary>
            <param name="departmentLayoutId">The id</param>
            <param name="file">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentLabelsAsync(MeetBase.Web.DepartmentRelatedAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the department labels
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddDepartmentLabelAsync(MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a department label
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentLabelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the department label with the specified <paramref name="departmentLabelId"/>
            </summary>
            <param name="departmentLabelId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateDepartmentLabelAsync(System.String,MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the department label with the specified <paramref name="departmentLabelId"/>
            </summary>
            <param name="departmentLabelId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteDepartmentLabelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the department label with the specified <paramref name="departmentLabelId"/>
            </summary>
            <param name="departmentLabelId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentContactMessagesAsync(MeetBase.Web.DepartmentRelatedAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the department contact messages
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddDepartmentContactMessageAsync(MeetBase.Web.DepartmentContactMessageRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a department contact message
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetDepartmentContactMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the department contact message with the specified <paramref name="departmentContactMessageId"/>
            </summary>
            <param name="departmentContactMessageId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateDepartmentContactMessageAsync(System.String,MeetBase.Web.DepartmentContactMessageRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the department contact message with the specified <paramref name="departmentContactMessageId"/>
            </summary>
            <param name="departmentContactMessageId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteDepartmentContactMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the department contact message with the specified <paramref name="departmentContactMessageId"/>
            </summary>
            <param name="departmentContactMessageId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetSecretariesAsync(MeetBase.Web.DepartmentRelatedAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the secretaries
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddSecretaryAsync(MeetBase.Web.SecretaryRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a secretary
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetSecretaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the secretary
            </summary>
            <param name="secretaryId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateSecretaryAsync(System.String,MeetBase.Web.SecretaryRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the secretary with the specified <paramref name="secretaryId"/>
            </summary>
            <param name="secretaryId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteSecretaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the secretary with the specified <paramref name="secretaryId"/>
            </summary>
            <param name="secretaryId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetProfessorsAsync(MeetBase.Web.DepartmentRelatedAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the professors
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddProfessorAsync(MeetBase.Web.ProfessorRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a professor
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetProfessorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the professor
            </summary>
            <param name="professorId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateProfessorAsync(System.String,System.Collections.Generic.KeyValuePair{MeetBase.Web.ProfessorRequestModel,MeetBase.Web.UserRequestModel},System.Threading.CancellationToken)">
            <summary>
            Updates the professor with the specified <paramref name="professorId"/>
            </summary>
            <param name="professorId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteProfessorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the professor with the specified <paramref name="professorId"/>
            </summary>
            <param name="professorId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetAppointmentRulesAsync(MeetBase.Web.AppointmentRuleAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the appointment rules
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddAppointmentRuleAsync(MeetBase.Web.AppointmentRuleRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates an appointment rule
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetAppointmentRuleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the appointment rule with the specified <paramref name="appointmentRuleId"/>
            </summary>
            <param name="appointmentRuleId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateAppointmentRuleAsync(System.String,MeetBase.Web.AppointmentRuleRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the appointment rule with the specified <paramref name="appointmentRuleId"/>
            </summary>
            <param name="appointmentRuleId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteAppointmentRuleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the appointment rule with the specified <paramref name="appointmentRuleId"/>
            </summary>
            <param name="appointmentRuleId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetAppointmentsAsync(MeetBase.Web.APIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the appointments
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.AddAppointmentAsync(MeetBase.Web.AppointmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a appointment
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.GetAppointmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the appointment with the specified <paramref name="appointmentId"/>
            </summary>
            <param name="appointmentId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.UpdateAppointmentAsync(System.String,MeetBase.Web.AppointmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the appointment with the specified <paramref name="appointmentId"/>
            </summary>
            <param name="appointmentId">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetCoreController.DeleteAppointmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the appointment with the specified <paramref name="appointmentId"/>
            </summary>
            <param name="appointmentId">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.MeetEduController">
            <summary>
            Controller used for handing the requests related to an MeetEdu related application
            </summary>
        </member>
        <member name="M:MeetEdu.MeetEduController.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MeetEduController.RegisterUserAsync(MeetBase.Web.UserRequestModel)">
            <summary>
            Registers a user
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.LoginAsync(MeetBase.Web.LogInRequestModel)">
            <summary>
            Validates the user credentials sent by the user and returns the user
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the user with the specified <paramref name="userId"/>
            </summary>
            <param name="userId">The memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetUniversityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the university with the specified <paramref name="id"/>
            </summary>
            <param name="id">The memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetDepartmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the department with the specified <paramref name="id"/>
            </summary>
            <param name="id">The memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetDepartmentContactMessagesAsync(MeetBase.Web.DepartmentRelatedAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the department contact messages
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.AddDepartmentContactMessageAsync(System.String,MeetBase.Web.DepartmentContactMessageRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a department contact message
            </summary>
            <param name="departmentId">The department id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetDepartmentContactMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the department contact message with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.UpdateDepartmentContactMessageAsync(System.String,MeetBase.Web.DepartmentContactMessageRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the department contact message with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetProfessorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the professor with the specified <paramref name="id"/>
            </summary>
            <param name="id">The memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetAppointmentRulesAsync(MeetBase.Web.AppointmentRuleAPIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the appointment rules
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetAppointmentsAsync(MeetBase.Web.APIArgs,System.Threading.CancellationToken)">
            <summary>
            Gets the appointments
            </summary>
            <param name="args">The arguments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.AddAppointmentAsync(MeetBase.Web.AppointmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Creates a appointment
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetAppointmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the appointment with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.UpdateAppointmentAsync(System.String,MeetBase.Web.AppointmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the appointment with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetMemberAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the member with the specified <paramref name="id"/>
            </summary>
            <param name="id">The memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.AddMemberSavedDepartmentAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds a saved the department with the specified <paramref name="departmentId"/> to the member with the specified <paramref name="memberId"/>
            </summary>
            <param name="memberId">The memberId</param>
            <param name="departmentId">The department id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetMemberSavedDepartmentsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the saved departments of the user with the specified <paramref name="id"/>
            </summary>
            <param name="id">The user id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetMemberSavedDepartmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the saved department with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.DeleteSavedDeparmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the saved department with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.AddMemberSavedProfessorAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds a saved the professor with the specified <paramref name="professorId"/> to the member with the specified <paramref name="memberId"/>
            </summary>
            <param name="memberId">The memberId</param>
            <param name="professorId">The professor </param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetMemberSavedProfessorsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the saved professors of the user with the specified <paramref name="id"/>
            </summary>
            <param name="id">The user memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.GetMemberSavedProfessorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the saved professor with the specified <paramref name="id"/>
            </summary>
            <param name="id">The memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduController.DeleteSavedProfessorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the saved professor with the specified <paramref name="id"/>
            </summary>
            <param name="id">The memberId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.LoginResult">
            <summary>
            Contains the <see cref="T:MeetEdu.UserEntity"/> and depending on the user role...
            <list type="bullet">
            <item>If it is a secretary, the <see cref="T:MeetEdu.SecretaryEntity"/></item>
            <item>If it is a professor, the <see cref="T:MeetEdu.ProfessorEntity"/></item>
            <item>If it is a member, the <see cref="T:MeetEdu.MemberEntity"/></item>
            </list>
            </summary>
        </member>
        <member name="P:MeetEdu.LoginResult.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="P:MeetEdu.LoginResult.Secretary">
            <summary>
            The secretary
            </summary>
        </member>
        <member name="P:MeetEdu.LoginResult.Professor">
            <summary>
            The professor
            </summary>
        </member>
        <member name="P:MeetEdu.LoginResult.Member">
            <summary>
            The member
            </summary>
        </member>
        <member name="M:MeetEdu.LoginResult.#ctor(MeetEdu.UserEntity,MeetEdu.SecretaryEntity)">
            <summary>
            Constructor for a secretary
            </summary>
        </member>
        <member name="M:MeetEdu.LoginResult.#ctor(MeetEdu.UserEntity,MeetEdu.ProfessorEntity)">
            <summary>
            Constructor for a professor
            </summary>
        </member>
        <member name="M:MeetEdu.LoginResult.#ctor(MeetEdu.UserEntity,MeetEdu.MemberEntity)">
            <summary>
            Constructor for a member
            </summary>
        </member>
        <member name="M:MeetEdu.LoginResult.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.UserResponseModel"/> from the current <see cref="T:MeetEdu.UserEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.MeetEduDbMapper">
            <summary>
            Global access points for the MeetEdu application database 
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.Signature">
            <summary>
            The MeetEdu signature used for identifying the MeetEdu entities
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.UniversitiesCollectionName">
            <summary>
            The universities collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.UniversityLabelsCollectionName">
            <summary>
            The university labels collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.DepartmentsCollectionName">
            <summary>
            The departments collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.DepartmentLabelsCollectionName">
            <summary>
            The department labels collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.DepartmentContactMessagesCollectionName">
            <summary>
            The department contact collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.DepartmentLayoutsCollectionName">
            <summary>
            The department layouts collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.AppointmentRulesCollectionName">
            <summary>
            The appointment templates collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.AppointmentsCollectionName">
            <summary>
            The appointments collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.UsersCollectionName">
            <summary>
            The users collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.ProfessorsCollectionName">
            <summary>
            The professors collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.SecretariesCollectionName">
            <summary>
            The secretaries collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.MembersCollectionName">
            <summary>
            The members collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.MemberSavedDepartmentsCollectionName">
            <summary>
            The member saved departments collection name
            </summary>
        </member>
        <member name="F:MeetEdu.MeetEduDbMapper.MemberSavedProfessorsCollectionName">
            <summary>
            The member saved professors collection name
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.Universities">
            <summary>
            The universities collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.UniversityLabels">
            <summary>
            The university labels collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.Departments">
            <summary>
            The departments collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.DepartmentLabels">
            <summary>
            The department labels collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.DepartmentLayouts">
            <summary>
            The department layouts collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.DepartmentContactMessages">
            <summary>
            The department contact messages collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.AppointmentRules">
            <summary>
            The appointment templates collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.Appointments">
            <summary>
            The appointments collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.Users">
            <summary>
            The users collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.Members">
            <summary>
            The members collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.MemberSavedDepartments">
            <summary>
            The member saved departments collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.MemberSavedProfessors">
            <summary>
            The member saved departments collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.Professors">
            <summary>
            The professors collection
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduDbMapper.Secretaries">
            <summary>
            The secretaries collection
            </summary>
        </member>
        <member name="T:MeetEdu.DI">
            <summary>
            The default application services that should be available everywhere in the application
            </summary>
        </member>
        <member name="F:MeetEdu.DI.mDatabase">
            <summary>
            The member of the <see cref="P:MeetEdu.DI.Database"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DI.mMapper">
            <summary>
            The member of the <see cref="P:MeetEdu.DI.Mapper"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.DI.Database">
            <summary>
            The database context
            </summary>
        </member>
        <member name="P:MeetEdu.DI.Mapper">
            <summary>
            The mapper
            </summary>
        </member>
        <member name="P:MeetEdu.DI.Provider">
            <summary>
            The dependency injection service provider
            </summary>
        </member>
        <member name="P:MeetEdu.DI.AccountsRepository">
            <summary>
            The accounts manager
            </summary>
        </member>
        <member name="P:MeetEdu.DI.UsersRepository">
            <summary>
            The users manager
            </summary>
        </member>
        <member name="P:MeetEdu.DI.SecretariesRepository">
            <summary>
            The secretaries manager
            </summary>
        </member>
        <member name="P:MeetEdu.DI.ProfessorsRepository">
            <summary>
            The professors manager
            </summary>
        </member>
        <member name="P:MeetEdu.DI.MembersRepository">
            <summary>
            The members manager
            </summary>
        </member>
        <member name="P:MeetEdu.DI.UniversitiesRepository">
            <summary>
            The universities manager
            </summary>
        </member>
        <member name="P:MeetEdu.DI.DepartmentsRepository">
            <summary>
            The departments manager
            </summary>
        </member>
        <member name="P:MeetEdu.DI.AppointmentsRepository">
            <summary>
            The appointments manager
            </summary>
        </member>
        <member name="M:MeetEdu.DI.GetRequiredService``1(System.Action{``0})">
            <summary>
            Gets the requested service from the service provider
            </summary>
            <typeparam name="TService">
            The type of the service.
            NOTE: Some services require a different approach when retrieving them.
                  For example, some services , in order to function properly, require
                  some variables that their default parameterless constructors can't set.
                  In that case, use the methods located in the DI in their own library!
            </typeparam>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.AppointmentEntity">
            <summary>
            Represents an appointment document in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.ProfessorId">
            <summary>
            The professor id
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.RuleId">
            <summary>
            The appointment rule id
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.Date">
            <summary>
            The date
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.TimeStart">
            <summary>
            The time that the appointment begins
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.TimeEnd">
            <summary>
            The time that the appointment ends
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.IsCanceled">
            <summary>
            A flag indicating whether the subscription was canceled or not
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.DateCanceled">
            <summary>
            The date the customer subscription was canceled
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.IsRemote">
            <summary>
            A flag indicating whether it is remote or not
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.Rule">
            <summary>
            The rule
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentEntity.Professor">
            <summary>
            The professor
            </summary>
        </member>
        <member name="M:MeetEdu.AppointmentEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.AppointmentEntity.FromRequestModelAsync(MeetBase.Web.AppointmentRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.AppointmentEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.AppointmentResponseModel"/> from the current <see cref="T:MeetEdu.AppointmentEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedAppointmentEntity"/> from the current <see cref="T:MeetEdu.AppointmentEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedAppointmentEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.AppointmentEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.ProfessorId">
            <summary>
            The professor id
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.RuleId">
            <summary>
            The appointment rule id
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.Date">
            <summary>
            The date
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.TimeStart">
            <summary>
            The time that the appointment begins
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.TimeEnd">
            <summary>
            The time that the appointment ends
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.IsCanceled">
            <summary>
            A flag indicating whether the subscription was canceled or not
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.IsRemote">
            <summary>
            A flag indicating whether it is remote or not
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentEntity.Rule">
            <summary>
            The rule
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedAppointmentEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.AppointmentRuleEntity">
            <summary>
            Represents an appointment template document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.AppointmentRuleEntity.mDescription">
            <summary>
            The member of the <see cref="P:MeetEdu.AppointmentRuleEntity.Description"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.AppointmentRuleEntity.mLink">
            <summary>
            The member of the <see cref="P:MeetEdu.AppointmentRuleEntity.Link"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.AppointmentRuleEntity.mNote">
            <summary>
            The member of the <see cref="P:MeetEdu.AppointmentRuleEntity.Note"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentRuleEntity.ProfessorId">
            <summary>
            The professor id
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentRuleEntity.HasRemoteOption">
            <summary>
            A flag indicating whether it has a remote option or not
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentRuleEntity.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentRuleEntity.Link">
            <summary>
            The link for the online appointment
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentRuleEntity.Note">
            <summary>
            The note
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentRuleEntity.Duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="M:MeetEdu.AppointmentRuleEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.AppointmentRuleEntity.FromRequestModel(MeetBase.Web.AppointmentRuleRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.AppointmentRuleEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentRuleEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.AppointmentRuleResponseModel"/> from the current <see cref="T:MeetEdu.AppointmentRuleEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentRuleEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedAppointmentRuleEntity"/> from the current <see cref="T:MeetEdu.AppointmentRuleEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedAppointmentRuleEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.AppointmentRuleEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentRuleEntity.ProfessorId">
            <summary>
            The professor id
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentRuleEntity.HasRemoteOption">
            <summary>
            A flag indicating whether it has a remote option or not
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedAppointmentRuleEntity.Duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedAppointmentRuleEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.BaseEntity">
            <summary>
            The base for a document in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.BaseEntity.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:MeetEdu.BaseEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.EmbeddedBaseEntity">
            <summary>
            The base for all the embedded entities
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedBaseEntity.Source">
            <summary>
            The id of the entity that was used for creating the current 
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedBaseEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.DateEntity">
            <summary>
            The date entity
            </summary>
        </member>
        <member name="P:MeetEdu.DateEntity.DateCreated">
            <summary>
            The creation date
            </summary>
        </member>
        <member name="P:MeetEdu.DateEntity.DateModified">
            <summary>
            The last modification date
            </summary>
        </member>
        <member name="M:MeetEdu.DateEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.DepartmentContactMessageEntity">
            <summary>
            Represents a department contact message document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentContactMessageEntity.mFirstName">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentContactMessageEntity.FirstName"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentContactMessageEntity.mLastName">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentContactMessageEntity.LastName"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentContactMessageEntity.mMessage">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentContactMessageEntity.Message"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentContactMessageEntity.mEmail">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentContactMessageEntity.Email"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentContactMessageEntity.DepartmentId">
            <summary>
            The department id
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentContactMessageEntity.MemberId">
            <summary>
            The member id
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentContactMessageEntity.FirstName">
            <summary>
            The first name
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentContactMessageEntity.LastName">
            <summary>
            The last name
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentContactMessageEntity.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentContactMessageEntity.PhoneNumber">
            <summary>
            The phone number
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentContactMessageEntity.Message">
            <summary>
            The message
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentContactMessageEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentContactMessageEntity.FromRequestModel(MeetBase.Web.DepartmentContactMessageRequestModel,MongoDB.Bson.ObjectId)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.DepartmentContactMessageEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <param name="departmentId">The department id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentContactMessageEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.DepartmentContactMessageResponseModel"/> from the current <see cref="T:MeetEdu.DepartmentContactMessageEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentContactMessageEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedDepartmentContactMessageEntity"/> from the current <see cref="T:MeetEdu.DepartmentContactMessageEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedDepartmentContactMessageEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.DepartmentContactMessageEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedDepartmentContactMessageEntity.mEmail">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedDepartmentContactMessageEntity.Email"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedDepartmentContactMessageEntity.DepartmentId">
            <summary>
            The company id
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedDepartmentContactMessageEntity.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedDepartmentContactMessageEntity.PhoneNumber">
            <summary>
            The phone number
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedDepartmentContactMessageEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.DepartmentEntity">
            <summary>
            Represents a department document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentEntity.mEmail">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentEntity.Email"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentEntity.mNote">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentEntity.Note"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentEntity.mDescription">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentEntity.Description"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentEntity.mLayoutDescription">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentEntity.LayoutDescription"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentEntity.mFields">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentEntity.Fields"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentEntity.mLabels">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentEntity.Labels"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.UniversityId">
            <summary>
            The university id
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.Category">
            <summary>
            The category
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.Fields">
            <summary>
            The fields of study
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.LayoutDescription">
            <summary>
            The layout description
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.Note">
            <summary>
            The note
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.TotalStaffMembers">
            <summary>
            The number of staff members
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.WorkHours">
            <summary>
            The work hours
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.ImageUrl">
            <summary>
            The image URL
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.Location">
            <summary>
            The location
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.PhoneNumber">
            <summary>
            The phone number
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.ContactMessageTemplate">
            <summary>
            The contact message template
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentEntity.Labels">
            <summary>
            The labels
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentEntity.FromRequestModel(MeetBase.Web.DepartmentRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.DepartmentEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.DepartmentResponseModel"/> from the current <see cref="T:MeetEdu.DepartmentEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentEntity.UpdateNonAutoMapperValues(MeetBase.Web.DepartmentRequestModel,MeetEdu.DepartmentEntity)">
            <summary>
            Updates the values of the specified <paramref name="entity"/> with the values of the specified <paramref name="model"/>.
            NOTE: This method only affects the properties that can't be mapped by the <see cref="T:AutoMapper.Mapper"/> and are not null!
            </summary>
            <param name="model">The model</param>
            <param name="entity">The entity</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedDepartmentEntity"/> from the current <see cref="T:MeetEdu.DepartmentEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedDepartmentEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.DepartmentEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedDepartmentEntity.UniversityId">
            <summary>
            The university id
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedDepartmentEntity.TotalStaffMembers">
            <summary>
            The number of staff members
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedDepartmentEntity.ImageUrl">
            <summary>
            The image URL
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedDepartmentEntity.Location">
            <summary>
            The location
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedDepartmentEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.DepartmentLayoutEntity">
            <summary>
            Represents a company layout document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentLayoutEntity.mDescription">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentLayoutEntity.Description"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.DepartmentLayoutEntity.mNote">
            <summary>
            The member of the <see cref="P:MeetEdu.DepartmentLayoutEntity.Note"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentLayoutEntity.DepartmentId">
            <summary>
            The company id
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentLayoutEntity.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentLayoutEntity.Note">
            <summary>
            The note
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentLayoutEntity.ImageFileSource">
            <summary>
            The image URL
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentLayoutEntity.DisplayTheme">
            <summary>
            The display theme
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentLayoutEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentLayoutEntity.FromRequestModel(MeetBase.Web.DepartmentLayoutRequestModel,MongoDB.Bson.ObjectId)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.DepartmentLayoutEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <param name="companyId">The company id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentLayoutEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.DepartmentLayoutResponseModel"/> from the current <see cref="T:MeetEdu.DepartmentLayoutEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.LabelEntity">
            <summary>
            Represents a label document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.LabelEntity.mDescription">
            <summary>
            The member of the <see cref="P:MeetEdu.LabelEntity.Description"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.LabelEntity.DepartmentId">
            <summary>
            The company id
            </summary>
        </member>
        <member name="P:MeetEdu.LabelEntity.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="M:MeetEdu.LabelEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.LabelEntity.FromRequestModel(MeetBase.Web.LabelRequestModel,MongoDB.Bson.ObjectId)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.LabelEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <param name="companyId">The company id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.LabelEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.LabelResponseModel"/> from the current <see cref="T:MeetEdu.LabelEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.LabelEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedLabelEntity"/> from the current <see cref="T:MeetEdu.LabelEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedLabelEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.LabelEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedLabelEntity.DepartmentId">
            <summary>
            The company id
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedLabelEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.MemberSavedDepartmentEntity">
            <summary>
            Only entity
            </summary>
        </member>
        <member name="P:MeetEdu.MemberSavedDepartmentEntity.DepartmentId">
            <summary>
            The company id
            </summary>
        </member>
        <member name="P:MeetEdu.MemberSavedDepartmentEntity.MemberId">
            <summary>
            The member id
            </summary>
        </member>
        <member name="M:MeetEdu.MemberSavedDepartmentEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.MemberSavedProfessorEntity">
            <summary>
            Only entity
            </summary>
        </member>
        <member name="P:MeetEdu.MemberSavedProfessorEntity.ProfessorId">
            <summary>
            The professor id
            </summary>
        </member>
        <member name="P:MeetEdu.MemberSavedProfessorEntity.MemberId">
            <summary>
            The member id
            </summary>
        </member>
        <member name="M:MeetEdu.MemberSavedProfessorEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.StandardEntity">
            <summary>
            The standard entity
            </summary>
        </member>
        <member name="F:MeetEdu.StandardEntity.mName">
            <summary>
            The member of the <see cref="P:MeetEdu.StandardEntity.Name"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.StandardEntity.mColor">
            <summary>
            The member of the <see cref="P:MeetEdu.StandardEntity.Color"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.StandardEntity.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:MeetEdu.StandardEntity.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="M:MeetEdu.StandardEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.StandardEntity.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedStandardEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.StandardEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedStandardEntity.mName">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedStandardEntity.Name"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedStandardEntity.mColor">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedStandardEntity.Color"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedStandardEntity.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedStandardEntity.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedStandardEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedStandardEntity.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.UniversityEntity">
            <summary>
            Represents a university document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.UniversityEntity.mLabels">
            <summary>
            The member of the <see cref="P:MeetEdu.UniversityEntity.Labels"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.UniversityEntity.ImageUrl">
            <summary>
            The image
            </summary>
        </member>
        <member name="P:MeetEdu.UniversityEntity.Labels">
            <summary>
            The labels
            </summary>
        </member>
        <member name="M:MeetEdu.UniversityEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.UniversityEntity.FromRequestModelAsync(MeetBase.Web.UniversityRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.UniversityEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversityEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.UniversityResponseModel"/> from the current <see cref="T:MeetEdu.UniversityEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversityEntity.UpdateNonAutoMapperValues(MeetBase.Web.UniversityRequestModel,MeetEdu.UniversityEntity)">
            <summary>
            Updates the values of the specified <paramref name="entity"/> with the values of the specified <paramref name="model"/>.
            NOTE: This method only affects the properties that can't be mapped by the <see cref="T:AutoMapper.Mapper"/> and are not null!
            </summary>
            <param name="model">The model</param>
            <param name="entity">The entity</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversityEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedUniversityEntity"/> from the current <see cref="T:MeetEdu.UniversityEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedUniversityEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.UniversityEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUniversityEntity.ImageUrl">
            <summary>
            The image
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedUniversityEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.MemberEntity">
            <summary>
            Represents a member document in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.MemberEntity.UserId">
            <summary>
            The id of the user
            </summary>
        </member>
        <member name="P:MeetEdu.MemberEntity.TotalAppointments">
            <summary>
            The total number of appointments
            </summary>
        </member>
        <member name="P:MeetEdu.MemberEntity.TotalSavedDepartments">
            <summary>
            The total number of saved companies
            </summary>
        </member>
        <member name="P:MeetEdu.MemberEntity.TotalSavedProfessors">
            <summary>
            The total number of saved professors
            </summary>
        </member>
        <member name="P:MeetEdu.MemberEntity.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="M:MeetEdu.MemberEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MemberEntity.FromRequestModelAsync(MeetBase.Web.MemberRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.MemberEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MemberEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.MemberResponseModel"/> from the current <see cref="T:MeetEdu.MemberEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MemberEntity.UpdateNonAutoMapperValues(MeetBase.Web.MemberRequestModel,MeetEdu.MemberEntity)">
            <summary>
            Updates the values of the specified <paramref name="entity"/> with the values of the specified <paramref name="model"/>.
            NOTE: This method only affects the properties that can't be mapped by the <see cref="T:AutoMapper.Mapper"/> and are not null!
            </summary>
            <param name="model">The model</param>
            <param name="entity">The entity</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MemberEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedMemberEntity"/> from the current <see cref="T:MeetEdu.MemberEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedMemberEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.MemberEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedMemberEntity.UserId">
            <summary>
            The id of the user
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedMemberEntity.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedMemberEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.ProfessorEntity">
            <summary>
            Represents a professor document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.ProfessorEntity.mField">
            <summary>
            The member of the <see cref="P:MeetEdu.ProfessorEntity.Field"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.ProfessorEntity.mResearchInterests">
            <summary>
            The member of the <see cref="P:MeetEdu.ProfessorEntity.ResearchInterests"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.ProfessorEntity.mWebsites">
            <summary>
            The member of the <see cref="P:MeetEdu.ProfessorEntity.Websites"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.ProfessorEntity.Rank">
            <summary>
            The rank
            </summary>
        </member>
        <member name="P:MeetEdu.ProfessorEntity.Websites">
            <summary>
            The personal websites 
            </summary>
        </member>
        <member name="P:MeetEdu.ProfessorEntity.Field">
            <summary>
            The field of study
            </summary>
        </member>
        <member name="P:MeetEdu.ProfessorEntity.ResearchInterests">
            <summary>
            The research interests
            </summary>
        </member>
        <member name="M:MeetEdu.ProfessorEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.ProfessorEntity.FromRequestModelAsync(MeetBase.Web.ProfessorRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.ProfessorEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.ProfessorEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.ProfessorResponseModel"/> from the current <see cref="T:MeetEdu.ProfessorEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.ProfessorEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedProfessorEntity"/> from the current <see cref="T:MeetEdu.ProfessorEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedProfessorEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.ProfessorEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedProfessorEntity.mField">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedProfessorEntity.Field"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedProfessorEntity.Rank">
            <summary>
            The rank
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedProfessorEntity.Field">
            <summary>
            The field of study
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedProfessorEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.SecretaryEntity">
            <summary>
            Represents a secretary document in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.SecretaryEntity.Role">
            <summary>
            The role
            </summary>
        </member>
        <member name="M:MeetEdu.SecretaryEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.SecretaryEntity.FromRequestModelAsync(MeetBase.Web.SecretaryRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.SecretaryEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.SecretaryEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.SecretaryResponseModel"/> from the current <see cref="T:MeetEdu.SecretaryEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.SecretaryEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedSecretaryEntity"/> from the current <see cref="T:MeetEdu.SecretaryEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedSecretaryEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.SecretaryEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedSecretaryEntity.Role">
            <summary>
            The role
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedSecretaryEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.StaffMemberEntity">
            <summary>
            Represents a staff member document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.StaffMemberEntity.mQuote">
            <summary>
            The member of the <see cref="P:MeetEdu.StaffMemberEntity.Quote"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.StaffMemberEntity.UserId">
            <summary>
            The user id
            </summary>
        </member>
        <member name="P:MeetEdu.StaffMemberEntity.DepartmentId">
            <summary>
            The department id
            </summary>
        </member>
        <member name="P:MeetEdu.StaffMemberEntity.Quote">
            <summary>
            The quote
            </summary>
        </member>
        <member name="P:MeetEdu.StaffMemberEntity.WeeklySchedule">
            <summary>
            The weekly schedule
            </summary>
        </member>
        <member name="P:MeetEdu.StaffMemberEntity.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="M:MeetEdu.StaffMemberEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.EmbeddedStaffMemberEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.StaffMemberEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedStaffMemberEntity.UserId">
            <summary>
            The user id
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedStaffMemberEntity.DepartmentId">
            <summary>
            The company id
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedStaffMemberEntity.WeeklySchedule">
            <summary>
            The weekly schedule
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedStaffMemberEntity.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedStaffMemberEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.UserEntity">
            <summary>
            Represents a user document in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.UserEntity.mFirstName">
            <summary>
            The member of the <see cref="P:MeetEdu.UserEntity.FirstName"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.UserEntity.mLastName">
            <summary>
            The member of the <see cref="P:MeetEdu.UserEntity.LastName"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.UserEntity.mUsername">
            <summary>
            The member of the <see cref="P:MeetEdu.UserEntity.Username"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.UserEntity.mPasswordHash">
            <summary>
            The member of the <see cref="P:MeetEdu.UserEntity.PasswordHash"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.UserEntity.mEmail">
            <summary>
            The member of the <see cref="P:MeetEdu.UserEntity.Email"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.UserEntity.mColor">
            <summary>
            The member of the <see cref="P:MeetEdu.UserEntity.Color"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.Username">
            <summary>
            The username
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.FirstName">
            <summary>
            The first name
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.LastName">
            <summary>
            The last name
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.PasswordHash">
            <summary>
            Gets or sets a salted and hashed representation of the password for this user.
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.IsEmailConfirmed">
            <summary>
            A flag indicating whether the email is confirmed or not
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.PhoneNumber">
            <summary>
            The phone number
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.ImageUrl">
            <summary>
            The image URL
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.DateOfBirth">
            <summary>
            The birthday
            </summary>
        </member>
        <member name="P:MeetEdu.UserEntity.Location">
            <summary>
            The location
            </summary>
        </member>
        <member name="M:MeetEdu.UserEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.UserEntity.FromRequestModel(MeetBase.Web.UserRequestModel)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.UserEntity"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UserEntity.ToResponseModel">
            <summary>
            Creates and returns a <see cref="T:MeetBase.Web.UserResponseModel"/> from the current <see cref="T:MeetEdu.UserEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UserEntity.ToEmbeddedEntity">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.EmbeddedUserEntity"/> from the current <see cref="T:MeetEdu.UserEntity"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EmbeddedUserEntity">
            <summary>
            A minimal version of the <see cref="T:MeetEdu.UserEntity"/> that contains the fields that are 
            more frequently used when embedding documents in the MongoDB
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedUserEntity.mFirstName">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedUserEntity.FirstName"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedUserEntity.mLastName">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedUserEntity.LastName"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedUserEntity.mUsername">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedUserEntity.Username"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedUserEntity.mEmail">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedUserEntity.Email"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.EmbeddedUserEntity.mColor">
            <summary>
            The member of the <see cref="P:MeetEdu.EmbeddedUserEntity.Color"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.Username">
            <summary>
            The username
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.FirstName">
            <summary>
            The first name
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.LastName">
            <summary>
            The last name
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.ImageUrl">
            <summary>
            The image URL
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.PhoneNumber">
            <summary>
            The phone number
            </summary>
        </member>
        <member name="P:MeetEdu.EmbeddedUserEntity.Location">
            <summary>
            The location
            </summary>
        </member>
        <member name="M:MeetEdu.EmbeddedUserEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.APIArgsExtensions">
            <summary>
            Extension methods for <see cref="T:MeetBase.Web.APIArgs"/>
            </summary>
        </member>
        <member name="M:MeetEdu.APIArgsExtensions.CreateFilters``1(MeetBase.Web.DepartmentRelatedAPIArgs)">
            <summary>
            Creates the filters for the specified <paramref name="args"/>
            </summary>
            <typeparam name="T">The document type</typeparam>
            <param name="args">The arguments</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.APIArgsExtensions.CreateFilters(MeetBase.Web.DepartmentAPIArgs)">
            <summary>
            Creates the filters for the specified <paramref name="args"/>
            </summary>
            <param name="args">The arguments</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.APIArgsExtensions.AggregateFilters``1(System.Collections.Generic.List{MongoDB.Driver.FilterDefinition{``0}})">
            <summary>
            Combines the specified <paramref name="filters"/>
            </summary>
            <typeparam name="T">The document type</typeparam>
            <param name="filters">The filters</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.FrameworkConstructionExtensions">
            <summary>
            Extension methods 
            </summary>
        </member>
        <member name="F:MeetEdu.FrameworkConstructionExtensions.RequestModelSuffix">
            <summary>
            The request model suffix
            </summary>
        </member>
        <member name="F:MeetEdu.FrameworkConstructionExtensions.EntitySuffix">
            <summary>
            The entity suffix
            </summary>
        </member>
        <member name="F:MeetEdu.FrameworkConstructionExtensions.EmbeddedPrefix">
            <summary>
            The embedded model suffix
            </summary>
        </member>
        <member name="F:MeetEdu.FrameworkConstructionExtensions.ResponseModelSuffix">
            <summary>
            The response model suffix
            </summary>
        </member>
        <member name="F:MeetEdu.FrameworkConstructionExtensions.APIArgsSuffix">
            <summary>
            The API args suffix
            </summary>
        </member>
        <member name="T:MeetEdu.IMongoQueryableExtensions">
            <summary>
            Extension methods for <see cref="T:MongoDB.Driver.Linq.IMongoQueryable`1"/>
            </summary>
        </member>
        <member name="M:MeetEdu.IMongoQueryableExtensions.OrderBy``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MeetBase.OrderCondition)">
            <summary>
            Sorts the elements of a sequence
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="orderCondition">The order condition.</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.IOrderedMongoQueryableExtensions">
            <summary>
            Extension methods for <see cref="T:MongoDB.Driver.Linq.IOrderedMongoQueryable`1"/>
            </summary>
        </member>
        <member name="M:MeetEdu.IOrderedMongoQueryableExtensions.ThenBy``1(MongoDB.Driver.Linq.IOrderedMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MeetBase.OrderCondition)">
            <summary>
            Performs a subsequent ordering of the elements
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="orderCondition">The order condition,</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.IServiceCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="F:MeetEdu.IServiceCollectionExtensions.EntityToDTONamespaceMaps">
            <summary>
            The maps of the namespaces between the entities and the DTOs
            </summary>
        </member>
        <member name="M:MeetEdu.IServiceCollectionExtensions.AddMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the pre-configured <see cref="T:AutoMapper.Mapper"/> in the <paramref name="services"/>
            </summary>
            <param name="services">The services</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EntityToDTONamespaceMap">
            <summary>
            The map from entities to data transfer objects
            </summary>
        </member>
        <member name="P:MeetEdu.EntityToDTONamespaceMap.EntityNamespace">
            <summary>
            The namespace of the entity
            </summary>
        </member>
        <member name="P:MeetEdu.EntityToDTONamespaceMap.DTONamespace">
            <summary>
            The namespace of the DTO
            </summary>
        </member>
        <member name="M:MeetEdu.EntityToDTONamespaceMap.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="entityNamespace">The namespace of the entity</param>
            <param name="dtoNamespace">The namespace of the DTO</param>
        </member>
        <member name="T:MeetEdu.StringExtensions">
            <summary>
            Extension methods for strings
            </summary>
        </member>
        <member name="M:MeetEdu.StringExtensions.ToObjectId(System.String)">
            <summary>
            Converts the specified <paramref name="s"/> to an <see cref="T:MongoDB.Bson.ObjectId"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.Helpers.ControllerHelpers">
            <summary>
            Helper methods for <see cref="T:Microsoft.AspNetCore.Mvc.Controller"/>s
            </summary>
        </member>
        <member name="M:MeetEdu.Helpers.ControllerHelpers.GetManyAsync``2(MongoDB.Driver.IMongoCollection{``1},System.Func{``1,``0},MongoDB.Driver.FilterDefinition{``1},MeetBase.Web.APIArgs,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},MeetBase.OrderCondition)">
            <summary>
            Get many 
            </summary>
            <typeparam name="TResponse">The type of the response model</typeparam>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="projector">The projector</param>
            <param name="filter">The filter</param>
            <param name="orderCondition">Indicates whether the order is ascending or descending</param>
            <param name="orderSelector">The order selector</param>
            <param name="args">The args</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.Helpers.ControllerHelpers.GetAsync``2(MongoDB.Driver.IMongoCollection{``1},System.Func{``1,``0},MongoDB.Driver.FilterDefinition{``1},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},MeetBase.OrderCondition)">
            <summary>
            Get one 
            </summary>
            <typeparam name="TResponse">The type of the response model</typeparam>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="projector">The projector</param>
            <param name="filter">The filter</param>
            <param name="orderSelector"></param>
            <param name="orderCondition">Indicates whether the order is ascending or descending</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.Helpers.ControllerHelpers.GetAsync``2(MongoDB.Driver.IMongoCollection{``1},System.Func{``1,``0},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},MeetBase.OrderCondition)">
            <summary>
            Get one 
            </summary>
            <typeparam name="TResponse">The type of the response model</typeparam>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="projector">The projector</param>
            <param name="filter">The filter</param>
            <param name="orderSelector"></param>
            <param name="orderCondition">Indicates whether the order is ascending or descending</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.EntityHelpers">
            <summary>
            Helper methods for entities
            </summary>
        </member>
        <member name="F:MeetEdu.EntityHelpers.mTypeToIdentifiablePropertiesMapper">
            <summary>
            Maps a <see cref="P:System.Type.FullName"/> that implements the <see cref="T:MeetBase.IDepartmentIdentifiable"/> to information related to its <see cref="T:MeetBase.IDepartmentIdentifiable"/> sub properties
            </summary>
        </member>
        <member name="M:MeetEdu.EntityHelpers.GetUserAsync(System.String)">
            <summary>
            Gets the user that has the specified <paramref name="userId"/> and return the <see cref="T:MeetEdu.EmbeddedUserEntity"/>
            </summary>
            <param name="userId">The user id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.FromRequestModel``1(System.Object)">
            <summary>
            Creates and returns an entity of the specified type using the specified
            <paramref name="model"/>
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.FromRequestModel``1(System.Object,System.Action{``0})">
            <summary>
            Creates and returns an entity of the specified type using the specified
            <paramref name="model"/>
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="model">The model</param>
            <param name="action">The action</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.FromRequestModel``1(System.Object,MongoDB.Bson.ObjectId)">
            <summary>
            Creates and returns an entity of the specified type using the specified
            <paramref name="model"/>
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="model">The model</param>
            <param name="companyId">The company id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.FromRequestModelAsync``2(``1,System.Func{``1,``0,System.Threading.Tasks.Task})">
            <summary>
            Creates and returns an entity of the specified type using the specified
            <paramref name="model"/>
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <typeparam name="TRequestModel">The type of the request model</typeparam>
            <param name="model">The type of the model</param>
            <param name="updateNonAutoMapperValues">
            Updates the values of the entity with the values of the specified <paramref name="model"/>.
            NOTE: This method only affects the properties that can't be mapped by the <see cref="T:AutoMapper.Mapper"/> and are not null!
            </param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.FromRequestModelAsync``2(``1,MongoDB.Bson.ObjectId,System.Func{``1,``0,MongoDB.Bson.ObjectId,System.Threading.Tasks.Task})">
            <summary>
            Creates and returns an entity of the specified type using the specified
            <paramref name="model"/>
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <typeparam name="TRequestModel">The type of the request model</typeparam>
            <param name="model">The type of the model</param>
            <param name="companyId">The company id</param>
            <param name="updateNonAutoMapperValues">
            Updates the values of the entity with the values of the specified <paramref name="model"/>.
            NOTE: This method only affects the properties that can't be mapped by the <see cref="T:AutoMapper.Mapper"/> and are not null!
            </param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.ToResponseModel``1(MeetEdu.BaseEntity)">
            <summary>
            Creates and returns a response model of a specified type using the specified <paramref name="entity"/>
            </summary>
            <typeparam name="TResponseModel">The type of the response model</typeparam>
            <param name="entity">The entity</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.ToEmbeddedEntity``1(MeetEdu.BaseEntity)">
            <summary>
            Creates and returns an embedded entity from the specified <paramref name="entity"/>
            </summary>
            <typeparam name="TEmbeddedEntity">The type of the embedded entity</typeparam>
            <param name="entity">The entity</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.UpdateNonAutoMapperValueAsync``3(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``1,System.Nullable{MongoDB.Bson.ObjectId}}},MongoDB.Driver.Linq.IMongoQueryable{``2},System.Action{``1,``2})">
            <summary>
            Updates the property of the entity selected by the specified <paramref name="entityDocumentPropertySelector"/>
            with a value retrieved using the specified <paramref name="queryable"/> along with the id provided by the value
            of the property selected by the specified <paramref name="modelIdPropertySelector"/>. If no value was retrieved 
            by the queryable null is set, otherwise the <see cref="T:MongoDB.Bson.ObjectId"/> that was used for retrieving the
            value
            </summary>
            <typeparam name="TRequestModel">The type of the request model</typeparam>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <typeparam name="TSourceEntity">The type of the entities that will be searched</typeparam>
            <param name="model">The model</param>
            <param name="entity">The entity</param>
            <param name="modelIdPropertySelector">Selects the id property of the <typeparamref name="TRequestModel"/></param>
            <param name="entityDocumentPropertySelector">Selects the document property of the <typeparamref name="TEntity"/></param>
            <param name="queryable">The queryable</param>
            <param name="updateAction">Further updates the entity</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.UpdateNonAutoMapperValueAsync``4(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``1,``3}},MongoDB.Driver.Linq.IMongoQueryable{``2},System.Func{``2,``3},System.Action{``1,``2})">
            <summary>
            Updates the property of the entity selected by the specified <paramref name="entityDocumentPropertySelector"/>
            with a value retrieved using the specified <paramref name="queryable"/> along with the id provided by the value
            of the property selected by the specified <paramref name="modelIdPropertySelector"/>
            </summary>
            <typeparam name="TRequestModel">The type of the request model</typeparam>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <typeparam name="TSourceEntity">The type of the entities that will be searched</typeparam>
            <typeparam name="TEmbeddedEntity">
            The type of the entity that should be created by the <typeparamref name="TSourceEntity"/> and
            placed as the value of the property of the <typeparamref name="TEntity"/>
            </typeparam>
            <param name="model">The model</param>
            <param name="entity">The entity</param>
            <param name="modelIdPropertySelector">Selects the id property of the <typeparamref name="TRequestModel"/></param>
            <param name="entityDocumentPropertySelector">Selects the document property of the <typeparamref name="TEntity"/></param>
            <param name="queryable">The queryable</param>
            <param name="projection">Creates and returns the embedded entity from the source entity</param>
            <param name="updateAction">Further updates the entity</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.EntityHelpers.UpdateNonAutoMapperEnumerableValueAsync``4(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{System.String}}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``3}}},MongoDB.Driver.Linq.IMongoQueryable{``2},System.Func{``2,``3})">
            <summary>
            Updates the property of the entity selected by the specified <paramref name="entityDocumentsPropertySelector"/>
            with a value retrieved using the specified <paramref name="queryable"/> along with the ids provided by the value
            of the property selected by the specified <paramref name="modelIdsPropertySelector"/>
            </summary>
            <typeparam name="TRequestModel">The type of the request model</typeparam>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <typeparam name="TSourceEntity">The type of the entities that will be searched</typeparam>
            <typeparam name="TEmbeddedEntity">
            The type of the entity that should be created by the <typeparamref name="TSourceEntity"/> and
            placed as the value of the property of the <typeparamref name="TEntity"/>
            </typeparam>
            <param name="model">The model</param>
            <param name="entity">The entity</param>
            <param name="modelIdsPropertySelector">Selects the ids property of the <typeparamref name="TRequestModel"/></param>
            <param name="entityDocumentsPropertySelector">Selects the documents property of the <typeparamref name="TEntity"/></param>
            <param name="queryable">The queryable</param>
            <param name="projection">Creates and returns the embedded entity from the source entity</param>
            <returns></returns>
        </member>
        <member name="P:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.Type">
            <summary>
            The parent type that implements the <see cref="T:MeetBase.IDepartmentIdentifiable"/>
            </summary>
        </member>
        <member name="P:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.CompanyIdentifiableProperties">
            <summary>
            The properties of the <see cref="P:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.Type"/> that implement the <see cref="T:MeetBase.IDepartmentIdentifiable"/>
            </summary>
        </member>
        <member name="P:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.EnumerableCompanyIdentifiableProperties">
            <summary>
            The enumerable properties of the <see cref="P:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.Type"/> whose generic type implement the <see cref="T:MeetBase.IDepartmentIdentifiable"/>
            </summary>
        </member>
        <member name="M:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Default constructor
            </summary>
            <param name="type">The parent type that implements the <see cref="T:MeetBase.IDepartmentIdentifiable"/></param>
            <param name="companyIdentifiableProperties">The properties of the <see cref="P:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.Type"/> that implement the <see cref="T:MeetBase.IDepartmentIdentifiable"/></param>
            <param name="enumerableCompanyIdentifiableProperties">The enumerable properties of the <see cref="P:MeetEdu.EntityHelpers.CompanyEntityCompanyIdentifiablePropertiesInformationDataModel.Type"/> whose generic type implement the <see cref="T:MeetBase.IDepartmentIdentifiable"/></param>
        </member>
        <member name="T:MeetEdu.MongoDbHelpers">
            <summary>
            Helper methods related to MongoDb
            </summary>
        </member>
        <member name="M:MeetEdu.MongoDbHelpers.Configure">
            <summary>
            Sets the global configurations to the MongoDb
            </summary>
        </member>
        <member name="T:MeetEdu.RepositoryHelpers">
            <summary>
            Helper Methods for the repositories
            </summary>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.AddAsync``1(MongoDB.Driver.IMongoCollection{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Adds the specified <paramref name="entity"/> to the specified <paramref name="collection"/>
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="entity">The entity</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.AddRangeAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Adds the specified <paramref name="entities"/> to the specified <paramref name="collection"/>
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="entities">The entity</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.FirstOrDefaultAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the first document that matches the requirements and null if none is found
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="filter">The filter expression</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.FirstOrDefaultAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Returns the first document that matches the requirements and null if none is found
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="id">The id of the document</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.FirstAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the first document that matches the requirements
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="filter">The filter expression</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.FirstAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Returns the first document that matches the requirements and null if none is found
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="id">The id of the document</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.SelectAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the documents that match the requirements and null if none is found
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="filter">The filter</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.AnyAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the first document that matches the requirements and throws a <see cref="T:System.InvalidOperationException"/> if none is found
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="filter">The filter expression</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.AnyAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Returns the first document that matches the requirements and throws a <see cref="T:System.InvalidOperationException"/> if none is found
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="id">The id of the document</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.UpdateAsync``1(MongoDB.Driver.IMongoCollection{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Updates the specified <paramref name="entity"/> while keeping its id the same.
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="entity">The new updated document</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.UpdateAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Bson.ObjectId,``1,System.Threading.CancellationToken)">
            <summary>
            Updates the <typeparamref name="TEntity"/> with the specified <paramref name="id"/>
            </summary>
            <param name="collection">The collection</param>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.RepositoryHelpers.DeleteAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the entity with the specified <paramref name="id"/> from the collection.
            </summary>
            <typeparam name="TEntity">The type of the entity</typeparam>
            <param name="collection">The collection</param>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.MongoDbDateOnlySerializer">
            <summary>
            An implementation of the <see cref="T:MongoDB.Bson.Serialization.IBsonSerializer"/> for the <see cref="T:System.DateOnly"/>
            </summary>
        </member>
        <member name="P:MeetEdu.MongoDbDateOnlySerializer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:MeetEdu.MongoDbDateOnlySerializer.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="M:MeetEdu.MongoDbDateOnlySerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MongoDbDateOnlySerializer.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context">The deserialization context.</param>
            <param name="args">The deserialization args.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MongoDbDateOnlySerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,System.DateOnly)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="args">The serialization args.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MeetEdu.MongoDbDateOnlySerializer.MongoDB#Bson#Serialization#IBsonSerializer#Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context">The deserialization context.</param>
            <param name="args">The deserialization args.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MongoDbDateOnlySerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,System.Object)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="args">The serialization args.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MeetEdu.MongoDbDateOnlySerializer.TryGetMemberSerializationInfo(System.String,MongoDB.Bson.Serialization.BsonSerializationInfo@)">
            <summary>
            Tries to get the serialization info for a member.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="serializationInfo">The serialization information.</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer">
            <summary>
            An implementation of the <see cref="T:MongoDB.Bson.Serialization.IBsonSerializer"/> for the <see cref="T:MeetBase.DayOfWeekTimeRange"/>
            </summary>
        </member>
        <member name="P:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="M:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context">The deserialization context.</param>
            <param name="args">The deserialization args.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,MeetBase.DayOfWeekTimeRange)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="args">The serialization args.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer.MongoDB#Bson#Serialization#IBsonSerializer#Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context">The deserialization context.</param>
            <param name="args">The deserialization args.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MongoDbDayOfWeekTimeRangeSerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,System.Object)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="args">The serialization args.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:MeetEdu.MongoDbTimeOnlySerializer">
            <summary>
            An implementation of the <see cref="T:MongoDB.Bson.Serialization.IBsonSerializer"/> for the <see cref="T:System.TimeOnly"/>
            </summary>
        </member>
        <member name="P:MeetEdu.MongoDbTimeOnlySerializer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:MeetEdu.MongoDbTimeOnlySerializer.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="M:MeetEdu.MongoDbTimeOnlySerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MongoDbTimeOnlySerializer.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context">The deserialization context.</param>
            <param name="args">The deserialization args.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MongoDbTimeOnlySerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,System.TimeOnly)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="args">The serialization args.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MeetEdu.MongoDbTimeOnlySerializer.MongoDB#Bson#Serialization#IBsonSerializer#Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context">The deserialization context.</param>
            <param name="args">The deserialization args.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MongoDbTimeOnlySerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,System.Object)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="args">The serialization args.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MeetEdu.MongoDbTimeOnlySerializer.TryGetMemberSerializationInfo(System.String,MongoDB.Bson.Serialization.BsonSerializationInfo@)">
            <summary>
            Tries to get the serialization info for a member.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="serializationInfo">The serialization information.</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.Pages.ErrorModel">
            <summary>
            The error model
            </summary>
        </member>
        <member name="P:MeetEdu.Pages.ErrorModel.RequestId">
            <summary>
            The request id
            </summary>
        </member>
        <member name="P:MeetEdu.Pages.ErrorModel.ShowRequestId">
            <summary>
            A flag indicating whether the request id is visible or not
            </summary>
        </member>
        <member name="F:MeetEdu.Pages.ErrorModel._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:MeetEdu.Pages.ErrorModel.#ctor(Microsoft.Extensions.Logging.ILogger{MeetEdu.Pages.ErrorModel})">
            <summary>
            Default constructor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:MeetEdu.Pages.ErrorModel.OnGet">
            <summary>
            On get
            </summary>
        </member>
        <member name="T:MeetEdu.Index">
            <summary>
            The main page
            </summary>
        </member>
        <member name="P:MeetEdu.Index.SearchText">
            <summary>
            The search text
            </summary>
        </member>
        <member name="M:MeetEdu.Index.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.SearchPage">
            <summary>
            The search page
            </summary>
        </member>
        <member name="P:MeetEdu.SearchPage.SearchText">
            <summary>
            The search text
            </summary>
        </member>
        <member name="M:MeetEdu.SearchPage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.AccountsRepository">
            <summary>
            The manager for the accounts
            </summary>
        </member>
        <member name="P:MeetEdu.AccountsRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.AccountsRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.AccountsRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.AccountsRepository.LoginAsync(MeetBase.Web.LogInRequestModel)">
            <summary>
            Validates the user credentials sent by the user and returns the user
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AccountsRepository.ValidateUserCredentialsAsync(MeetBase.Web.LogInRequestModel)">
            <summary>
            Validates the user <paramref name="credentials"/>
            </summary>
            <param name="credentials">The credentials</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AccountsRepository.ResetUserPasswordAsync(MeetBase.Web.ResetPasswordRequestModel)">
            <summary>
            Resets the user password
            </summary>
            <param name="credentials">The credentials</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.AppointmentsRepository">
            <summary>
            Provides methods for managing appointments
            </summary>
        </member>
        <member name="P:MeetEdu.AppointmentsRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.AppointmentsRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.AppointmentsRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.AppointmentsRepository.AddAppointmentAsync(MeetBase.Web.AppointmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Adds an appointment
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentsRepository.UpdateAppointmentAsync(MongoDB.Bson.ObjectId,MeetBase.Web.AppointmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the appointment with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentsRepository.DeleteAppointmentAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the appointment with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentsRepository.AddAppointmentRuleAsync(MeetBase.Web.AppointmentRuleRequestModel,System.Threading.CancellationToken)">
            <summary>
            Adds an appointment rule
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentsRepository.UpdateAppointmentRuleAsync(MongoDB.Bson.ObjectId,MeetBase.Web.AppointmentRuleRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the appointment rule with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.AppointmentsRepository.DeleteAppointmentRuleAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the appointment rule with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.DepartmentsRepository">
            <summary>
            Provides methods for managing departments
            </summary>
        </member>
        <member name="P:MeetEdu.DepartmentsRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.DepartmentsRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.AddDepartmentAsync(MeetBase.Web.DepartmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Adds a department
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.UpdateDepartmentAsync(MongoDB.Bson.ObjectId,MeetBase.Web.DepartmentRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the department with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.DeleteDepartmentAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the department with the specified <paramref name="id"/>
            </summary>
            <param name="id">The department id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.AddDepartmentLabelAsync(MongoDB.Bson.ObjectId,MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Add a department label
            </summary>
            <param name="departmentId">The department id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.UpdateDepartmentLabelAsync(MongoDB.Bson.ObjectId,MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the department with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.DeleteDepartmentLabelAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the department label with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.AddDepartmentContactMessageAsync(MongoDB.Bson.ObjectId,MeetBase.Web.DepartmentContactMessageRequestModel,System.Threading.CancellationToken)">
            <summary>
            Add a department contact message 
            </summary>
            <param name="departmentId">The department id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.UpdateDepartmentContactMessageAsync(MongoDB.Bson.ObjectId,MeetBase.Web.DepartmentContactMessageRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the contact message with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.DeleteDepartmentContactMessageAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the department contact message with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.SetDepartmentLayoutImageAsync(MongoDB.Bson.ObjectId,Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
            Sets a department layout image
            </summary>
            <param name="layoutId">The layout id</param>
            <param name="file">The file</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.AddDepartmentLayoutAsync(MongoDB.Bson.ObjectId,MeetBase.Web.DepartmentLayoutRequestModel,System.Threading.CancellationToken)">
            <summary>
            Add a department layout
            </summary>
            <param name="departmentId">The department id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.UpdateDepartmentLayoutAsync(MongoDB.Bson.ObjectId,MeetBase.Web.DepartmentLayoutRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the layout with the specified <paramref name="layoutId"/>
            </summary>
            <param name="layoutId">The layout id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.DeleteDepartmentLayoutAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the department layout with the specified <paramref name="layoutId"/>
            </summary>
            <param name="layoutId">The layout id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.DepartmentsRepository.ExecuteAgainstDepartmentLayoutAsync(MongoDB.Bson.ObjectId,System.Func{MeetEdu.DepartmentLayoutEntity,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes the specified <paramref name="action"/> against the layout with the specified <paramref name="layoutId"/>
            </summary>
            <param name="layoutId">The layout id</param>
            <param name="action">The action</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.UniversitiesRepository">
            <summary>
            Provides methods for managing universities
            </summary>
        </member>
        <member name="P:MeetEdu.UniversitiesRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.UniversitiesRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.UniversitiesRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.UniversitiesRepository.AddUniversityAsync(MeetBase.Web.UniversityRequestModel,System.Threading.CancellationToken)">
            <summary>
            Adds a university
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversitiesRepository.UpdateUniversityAsync(MongoDB.Bson.ObjectId,MeetBase.Web.UniversityRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the university with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversitiesRepository.DeleteUniversityAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the university with the specified <paramref name="id"/>
            </summary>
            <param name="id">The university id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversitiesRepository.AddUniversityLabelAsync(MongoDB.Bson.ObjectId,MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Add a university label
            </summary>
            <param name="universitiesId">The university id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversitiesRepository.UpdateUniversityLabelAsync(MongoDB.Bson.ObjectId,MeetBase.Web.LabelRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the university with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UniversitiesRepository.DeleteUniversityLabelAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the university label with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.MeetEduUserManager">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> implementation that is used by the Atom framework
            </summary>
        </member>
        <member name="P:MeetEdu.MeetEduUserManager.EmailTokenProvider">
            <summary>
            The token provider used for generating 6 digit verification tokens
            </summary>
        </member>
        <member name="M:MeetEdu.MeetEduUserManager.#ctor(Microsoft.AspNetCore.Identity.IUserStore{MeetEdu.UserEntity},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{MeetEdu.UserEntity},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{MeetEdu.UserEntity}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{MeetEdu.UserEntity}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{MeetEdu.UserEntity}})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MeetEduUserManager.GeneratePasswordResetTokenAsync(MeetEdu.UserEntity)">
            <summary>
            Generates a password reset token for the specified user, using the configured
            password reset token provider.
            </summary>
            <param name="user">The user to generate a password reset token for.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduUserManager.GenerateEmailConfirmationTokenAsync(MeetEdu.UserEntity)">
            <summary>
            Generates an email confirmation token for the specified user.
            </summary>
            <param name="user">The user to generate an email confirmation token for.</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduUserManager.VerifyUserTokenAsync(MeetEdu.UserEntity,System.String,System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified token is valid for the given
            user and purpose.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="tokenProvider">The token provider used to generate the token.</param>
            <param name="purpose">The purpose the token should be generated for.</param>
            <param name="token">The token to validate</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MeetEduUserManager.ChangePasswordAsync(MeetEdu.UserEntity,System.String)">
            <summary>
            Changes the password of the specified user
            </summary>
            <param name="user">The user</param>
            <param name="newPassword">The new password</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.MembersRepository">
            <summary>
            Provides methods for managing members
            </summary>
        </member>
        <member name="P:MeetEdu.MembersRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.MembersRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.MembersRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.MembersRepository.AddMemberAsync(MeetBase.Web.MemberRequestModel)">
            <summary>
            Adds a member
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MembersRepository.UpdateMemberAsync(MongoDB.Bson.ObjectId,MeetBase.Web.UserRequestModel)">
            <summary>
            Updates the member with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MembersRepository.DeleteMemberAsync(MongoDB.Bson.ObjectId)">
            <summary>
            Deletes the member with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MembersRepository.AddMemberSavedDpartmentAsync(MongoDB.Bson.ObjectId,MongoDB.Bson.ObjectId)">
            <summary>
            Adds the professor with the specified <paramref name="departmentId"/> as a saved professor to the member with the specified <paramref name="memberId"/>
            </summary>
            <param name="memberId">The member id</param>
            <param name="departmentId">The professor id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MembersRepository.DeleteMemberSavedDepartmentAsync(MongoDB.Bson.ObjectId)">
            <summary>
            Deletes the member saved department with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MembersRepository.AddMemberSavedProfessorAsync(MongoDB.Bson.ObjectId,MongoDB.Bson.ObjectId)">
            <summary>
            Adds the professor with the specified <paramref name="professorId"/> as a saved professor to the member with the specified <paramref name="memberId"/>
            </summary>
            <param name="memberId">The member id</param>
            <param name="professorId">The professor id</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.MembersRepository.DeleteMemberFavoriteProfessorAsync(MongoDB.Bson.ObjectId)">
            <summary>
            Deletes the member saved professor with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.ProfessorsRepository">
            <summary>
            Provides methods for managing professors
            </summary>
        </member>
        <member name="P:MeetEdu.ProfessorsRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.ProfessorsRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.ProfessorsRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.ProfessorsRepository.AddProfessorAsync(MeetBase.Web.ProfessorRequestModel,System.Threading.CancellationToken)">
            <summary>
            Adds a professor
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.ProfessorsRepository.UpdateProfessorAsync(MongoDB.Bson.ObjectId,MeetBase.Web.ProfessorRequestModel,MeetBase.Web.UserRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the professor with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="professor">The professor</param>
            <param name="user">The user</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.ProfessorsRepository.DeleteProfessorAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the professor with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.SecretariesRepository">
            <summary>
            Provides methods for managing secretaries
            </summary>
        </member>
        <member name="P:MeetEdu.SecretariesRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.SecretariesRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.SecretariesRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.SecretariesRepository.AddSecretaryAsync(MeetBase.Web.SecretaryRequestModel,System.Threading.CancellationToken)">
            <summary>
            Adds a secretary
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.SecretariesRepository.UpdateSecretaryAsync(MongoDB.Bson.ObjectId,MeetBase.Web.SecretaryRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the secretary with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The secretary</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.SecretariesRepository.DeleteSecretaryAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the secretary with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.UsersRepository">
            <summary>
            Provides methods for managing users
            </summary>
        </member>
        <member name="P:MeetEdu.UsersRepository.Instance">
            <summary>
            The single instance of the <see cref="T:MeetEdu.UsersRepository"/>
            </summary>
        </member>
        <member name="M:MeetEdu.UsersRepository.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.UsersRepository.AddUserAsync(MeetBase.Web.UserRequestModel,System.Threading.CancellationToken)">
            <summary>
            Adds a user
            </summary>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UsersRepository.UpdateUserAsync(MongoDB.Bson.ObjectId,MeetBase.Web.UserRequestModel,System.Threading.CancellationToken)">
            <summary>
            Updates the user with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="model">The model</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.UsersRepository.DeleteUserAsync(MongoDB.Bson.ObjectId,System.Threading.CancellationToken)">
            <summary>
            Deletes the user with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:MeetEdu.Shared.MainLayout">
            <summary>
            The main layout
            </summary>
        </member>
        <member name="F:MeetEdu.Shared.MainLayout.mMeetEduTheme">
            <summary>
            The theme provider
            </summary>
        </member>
        <member name="M:MeetEdu.Shared.MainLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.WebServerFailable">
            <summary>
            An implementation of the <see cref="T:MeetBase.IFailable"/> used by the services of the web server
            </summary>
        </member>
        <member name="F:MeetEdu.WebServerFailable.mException">
            <summary>
            The member of the <see cref="P:MeetEdu.WebServerFailable.Exception"/> property
            </summary>
        </member>
        <member name="F:MeetEdu.WebServerFailable.mErrorMessage">
            <summary>
            The member of the <see cref="P:MeetEdu.WebServerFailable.ErrorMessage"/> property
            </summary>
        </member>
        <member name="P:MeetEdu.WebServerFailable.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MeetEdu.WebServerFailable.ErrorType">
            <summary>
            The error type
            </summary>
        </member>
        <member name="P:MeetEdu.WebServerFailable.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:MeetEdu.WebServerFailable.IsSuccessful">
            <summary>
            A flag indicating whether the task was successful or not
            </summary>
        </member>
        <member name="P:MeetEdu.WebServerFailable.StatusCode">
            <summary>
            The status code
            </summary>
        </member>
        <member name="M:MeetEdu.WebServerFailable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.WebServerFailable.#ctor(System.Exception)">
            <summary>
            Exception based constructor
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MeetEdu.WebServerFailable.FromResult``1(``0)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.WebServerFailable`1"/> that
            represents the specified <paramref name="result"/>
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.WebServerFailable.NotFound(System.String,System.String)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.WebServerFailable`1"/> indicating
            that a resource was not found
            </summary>
            <param name="itemId">The id of the item that was searched</param>
            <param name="itemsName">The name of the items</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.WebServerFailable.NotFound(MongoDB.Bson.ObjectId,System.String)">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.WebServerFailable`1"/> indicating
            that a resource was not found
            </summary>
            <param name="itemId">The id of the item that was searched</param>
            <param name="itemsName">The name of the items</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.WebServerFailable.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.WebServerFailable.op_Implicit(System.String)~MeetEdu.WebServerFailable">
            <summary>
            Creates a <see cref="T:MeetEdu.WebServerFailable"/> using the specified string as its error message
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:MeetEdu.WebServerFailable.op_Implicit(System.Exception)~MeetEdu.WebServerFailable">
            <summary>
            Creates a <see cref="T:MeetEdu.WebServerFailable"/> using the message of the specified ex and its inner exceptions
            as its error message
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="T:MeetEdu.WebServerFailable.UnsuccessfulWebServerFailable">
            <summary>
            A <see cref="T:MeetEdu.WebServerFailable"/> used when the operation was unsuccessful
            </summary>
        </member>
        <member name="M:MeetEdu.WebServerFailable.UnsuccessfulWebServerFailable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:MeetEdu.WebServerFailable`1">
            <summary>
            An implementation of the <see cref="T:MeetBase.IFailable`1"/> used by the web server services
            </summary>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:MeetEdu.WebServerFailable`1.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.#ctor(`0)">
            <summary>
            Result based constructor
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.#ctor(System.Exception)">
            <summary>
            Exception based constructor
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.ToObjectResult">
            <summary>
            Creates and returns an <see cref="T:Microsoft.AspNetCore.Mvc.ObjectResult"/> that represents the 
            current <see cref="T:MeetEdu.WebServerFailable"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.op_Implicit(System.String)~MeetEdu.WebServerFailable{`0}">
            <summary>
            Creates a <see cref="T:MeetEdu.WebServerFailable`1"/> using the specified string as its error message
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.op_Implicit(System.Exception)~MeetEdu.WebServerFailable{`0}">
            <summary>
            Creates a <see cref="T:MeetEdu.WebServerFailable`1"/> using the message of the specified ex and its inner exceptions
            as its error message
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.op_Implicit(`0)~MeetEdu.WebServerFailable{`0}">
            <summary>
            Creates a <see cref="T:MeetEdu.WebServerFailable`1"/> using the specified result as its result
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.op_Implicit(MeetEdu.WebServerFailable.UnsuccessfulWebServerFailable)~MeetEdu.WebServerFailable{`0}">
            <summary>
            Creates a <see cref="T:MeetEdu.WebServerFailable`1"/> from the specified <paramref name="failable"/>
            </summary>
        </member>
        <member name="M:MeetEdu.WebServerFailable`1.op_Implicit(MeetEdu.WebServerFailable{`0})~Microsoft.AspNetCore.Mvc.ActionResult{`0}">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> using the specified <paramref name="result"/>
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="T:MeetEdu.WebServerFailableExtensions">
            <summary>
            Extension methods for <see cref="T:MeetEdu.WebServerFailable`1"/>
            </summary>
        </member>
        <member name="M:MeetEdu.WebServerFailableExtensions.ToActionResult``2(MeetEdu.WebServerFailable{``0},System.Func{``0,``1})">
            <summary>
            Creates and returns a <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> that represents the specified <paramref name="failable"/>
            </summary>
            <typeparam name="TResult">The initial type of the result of the failable</typeparam>
            <typeparam name="TOtherResult">The projected type of the result of the failable</typeparam>
            <param name="failable">The failable</param>
            <param name="projector">The projector</param>
            <returns></returns>
        </member>
        <member name="M:MeetEdu.WebServerFailableExtensions.ToUnsuccessfulWebServerFailable(MeetEdu.WebServerFailable,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates and returns a <see cref="T:MeetEdu.WebServerFailable.UnsuccessfulWebServerFailable"/> from the <paramref name="failable"/>
            </summary>
            <param name="failable">The failable</param>
            <param name="customErrorMessage">The custom error message</param>
            <param name="customStatusCode">The custom status code</param>
            <returns></returns>
        </member>
    </members>
</doc>
