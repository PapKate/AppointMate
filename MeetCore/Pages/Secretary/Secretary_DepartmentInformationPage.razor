@page "/secretaries/{Id}/information"

@inherits BasePage

@using static MeetBase.Blazor.PaletteColors
@using static MeetBase.Blazor.CssVariables

@using static MeetBase.Blazor.Personalization

@namespace MeetCore

<PageTitle>@EnglishLocalization.Information</PageTitle>

<ApplicationContainer>

    <div id="departmentContainer" class="modelContainer" style="@BorderBrushVariable.SetCssColor(Model.Color)">
        <div class="modelRibbonContainer" style="@BackgroundVariable.SetCssColor(Model.Color) @ForegroundVariable.SetCssColor(Model.Color.DarkOrWhite())">
            <div class="modelEmptySpace"></div>
            <div class="modelRibbon">
                <div class="modelRibbonInfoContainer">
                    <h1 class="modelRibbonInfo">@Model.Name</h1>
                    <div class="modelRibbonInfoDetails">
                        <h3 class="departmentPreviewRibbonUniName">@Model.University!.Name</h3>
                        <span>-</span>
                        <div class="departmentPreviewCategoryContainer">
                            <span class="departmentPreviewCategory">@Model.Category.ToString().BreakWords()</span>
                            <MudIcon Icon="@Icons.Material.Filled.Groups3" Size="@Size.Medium" />
                        </div>
                    </div>
                </div>

                <IconButton BackColor="transparent"
                            ForeColor="@White"
                            VectorSource="@IconPaths.PencilOutlinePath"
                            BoxShadow="none"
                            OnClick="@UpdateDepartment"
                            CssClasses="departmentRibbonEditContainer" />
            </div>
        </div>

        <div class="modelInfoContainer">
            <div class="modelImageAndContactContainer">
                <div class="modelImageContainer" style="@BorderBrushVariable.SetCssColor(Model!.Color)">
                    <ImageWithFallbackVector CssClasses="modelImage"
                                             ImageSource="@Model.ImageUrl?.ToString()"
                                             AspectRatio="1 / 1"
                                             VectorType="@typeof(DepartmentVector)"
                                             FallbackIconColor="@Model.Color"
                                             FallbackIconMargin="1rem"
                                             AlternateText="@Model.Name" />
                </div>
                <div class="modelContactContainer">
                    <div class="modelContactImage">
                        <CallVector Color="@Model.Color" />
                    </div>
                    <span class="modelContactValue">@Model.PhoneNumber?.ToE164PhoneNumberString()</span>

                    <div class="modelContactImage">
                        <EmailMultipleVector Color="@Model.Color" />
                    </div>
                    <span class="modelContactValue">@Model.Email</span>

                    <div class="modelContactImage">
                        <MapMarkerVector Color="@Model.Color" />
                    </div>
                    <span class="modelContactValue">@(Model.Location is not null ? $"{Model.Location.Address}, {Model.Location.City}, {Model.Location.Postcode}" : "-")</span>
                </div>
            </div>
            @if (!Model.Websites.IsNullOrEmpty())
            {
                <div id="professorWebsites" class="staffMemberPositionContainer">
                    <span class="modelInfoTitle" style="color:@Model.Color.NormalizedColor();">Websites</span>
                    @foreach (var website in Model.Websites)
                    {
                        <span class="modelInfoText modelWebsiteName">
                            <a href="@website.Link" target="_blank" rel="noopener noreferrer" style="@ForegroundVariable.SetCssColor(Model.Color)">@website.Name</a>
                        </span>
                    }
                </div>
            }
            <div class="modelWeeklyScheduleContainer">
                <div class="modelWeeklySchedule">
                    <span class="modelWeeklyScheduleTitle" style="@ForegroundVariable.SetCssColor(Model.Color)">Secretary hours</span>
                </div>
                @if (Model.WorkHours is not null)
                {
                    @foreach (var schedule in Model.WorkHours.WeeklyHours.OrderBy(x => x.DayOfWeek).GroupBy(x => x.DayOfWeek))
                    {
                        <div class="modelWeeklyScheduleDayContainer">
                            <span class="modelWeeklyScheduleDay">@schedule.Key</span>
                            @foreach (var timespan in schedule.OrderBy(x => x.Start))
                            {
                                <span class="modelWeeklyScheduleTime">@timespan.Start.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat) - @timespan.End.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat)</span>
                            }
                        </div>
                    }
                    <span class="modelWeeklyScheduleNote">@Model.WorkHours.Note</span>
                }
            </div>

        </div>

            <div class="locationContainer">
                <LocationPointer MapId="@Model.Id" Color="@Model.Color" Location="@Model.Location" IsReadOnly="true" />
            </div>
        
    </div>
    

    <div class="departmentQuoteContainer">
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        <span>"@Model.Quote"</span>
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
    </div>
    
    <div class="departmentDescription">
        <span style="display: flex;">
            @Model.Description
            <IconButton BackColor="transparent"
                        ForeColor="@Gray"
                        VectorSource="@IconPaths.PencilOutlinePath"
                        BoxShadow="none"
                        OnClick="@UpdateDepartmentContent"
                        CssClasses="departmentDescriptionEditContainer" />
        </span>
        
        @if(Model.Fields is not null)
        {
            @foreach(var field in Model.Fields)
            {
                <span class="departmentDescriptionField">
                    <VectorIcon VectorSource="@IconPaths.BilliardsPath" Color="@Model.Color"/>
                    @field
                </span>
            }
        }
        <span class="departmentDescriptionNote">@Model.Note</span>
    </div>

    <div class="departmentScheduleContainer">
        <Schedule WeeklySchedule="@Model.WorkHours"
                  IsEditable="true"
                  EditButtonOnClick="@UpdateSchedule" />
    </div>
</ApplicationContainer>

<style>

    #departmentContainer {
        position: relative;
        top: 1rem;
        border:none;
    }

    .locationContainer {
        grid-row-start: 1;
        grid-column-start: 2;
        grid-column-end: 3;
        position: relative;
        margin-top: 104px;
        width: 100%;
        height: fit-content;
        display: flex;
        padding: 12px;
        z-index: 1;
    
    }

    .departmentPreviewCategoryContainer {
        position: relative;
        display: flex;
        align-items: center;
        gap: @LargeGap;
    }

    .departmentPreviewCategory {
        font-weight: 700;
    }

    .location {
        position: relative;
        width: 100%;
        height: auto;
        max-height: 300px;
        border-radius: @VeryLargeBorderRadius;
        border: 1px solid @LightGray.NormalizedColor();
    }

    .departmentQuoteContainer {
        position: relative;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        font-style: italic;
        font-weight: 300;
        text-align: center;
        padding: 1rem;
    }

    .departmentDescription {
        position: relative;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        text-align: start;
        gap: @LargeGap;
        padding: @VeryLargePadding @XXLargePadding;
    }

    .departmentDescriptionEditContainer {
        position: absolute;
        width: 3rem;
        height: 3rem;
        padding: 8px;
        cursor: pointer;
        top: -2rem;
        right: 2rem;
    }

    .departmentDescriptionField {
        position: relative;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: @MediumGap;
        margin-left: 2rem;
    }

        .departmentDescriptionField svg {
            width: 24px;
            transform: rotate(90deg);
        }

    .departmentDescriptionNote {
        font-size: 92%;
    }

    .departmentScheduleContainer {
        padding: @VeryLargePadding;
    }

    .departmentRibbonEditContainer {
        width: 3rem;
        height: 3rem;
        padding: 8px;
        margin-right: 8px;
        cursor: pointer;
    }

    @@media screen and (max-width: 440px) {

        .departmentImageAndContactContainer {
            height: 160px;
        }

        .departmentContainer {
            min-width: 360px;
            width: 360px;
            font-size: 90%;
        }

        .departmentRibbonContainer {
            grid-template-columns: 132px 1fr;
        }

        .departmentImageContainer {
            width: 120px;
            height: 120px;
        }

        .departmentPositionContainer {
            padding: @LargePadding @LargePadding 0 @LargePadding;
        }

        .departmentWeeklyScheduleContainer {
            gap: @MediumGap @LargeGap;
            padding: @LargePadding;
        }
    }

</style>