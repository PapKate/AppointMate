@using MeetBase.Blazor;

@using static MeetBase.Blazor.PaletteColors
@using static MeetBase.Blazor.CssVariables
@using static MeetBase.Blazor.Personalization

@namespace MeetEdu

@if(Model is not null)
{
    <div class="modelContainer departmentPreviewContainer" style="@SetStyle()" @onclick="@DepartmentContainer_OnClick">
        <div class="modelRibbonContainer" style="@BackgroundVariable.SetCssColor(Model.Color) @ForegroundVariable.SetCssColor(Model.Color.DarkOrWhite())">
            <div class="modelEmptySpace"></div>
            <div class="modelRibbon">
                <div class="modelRibbonInfoContainer">
                    <h1 class="modelRibbonInfo">@Model.Name</h1>
                    <div class="modelRibbonInfoDetails">
                        <h3 class="departmentPreviewRibbonUniName">@Model.UniversityId</h3>
                        <div class="departmentPreviewCategoryContainer">
                            <span class="departmentPreviewCategory">- @Model.Category</span>
                            <MudIcon Icon="@Icons.Material.Filled.Groups3" Size="@Size.Medium" />
                        </div>
                    </div>
                </div>  

                <IconButton BackColor="transparent" 
                            ForeColor="@Model.Color.DarkOrWhite()" 
                            VectorSource="@IconPaths.HeartOutlinePath" 
                            HasAnimation="false"
                            BoxShadow="none"
                            CssClasses="departmentPreviewRibbonHeartContainer" />
            </div>
        </div>

        <div class="modelInfoContainer">
            <div class="modelImageAndContactContainer">
                <div class="modelImageContainer" style="@BorderBrushVariable.SetCssColor(Model!.Color)">
                    <img class="modelImage" src="@Model.ImageUrl?.ToString()" alt="@Model.Name" />
                </div>
                <div class="modelContactContainer">
                    <div class="modelContactImage">
                        <CallVector Color="@Model.Color" />
                    </div>
                    <span class="modelContactValue">@Model.PhoneNumber?.ToE164PhoneNumberString()</span>

                    <div class="modelContactImage">
                        <EmailMultipleVector Color="@Model.Color" />
                    </div>
                    <span class="modelContactValue">@Model.Email</span>
                    
                    <div class="modelContactImage">
                        <MapMarkerVector Color="@Model.Color" />
                    </div>
                    <span class="modelContactValue">@(Model.Location is not null ? $"{Model.Location.Address}, {Model.Location.City}, {Model.Location.Postcode}" : "-")</span>
                </div>
            </div>

             <div class="modelWeeklyScheduleContainer">
                <div class="modelWeeklySchedule">
                    <span class="modelWeeklyScheduleTitle" style="@ForegroundVariable.SetCssColor(Model.Color)">Secretary</span>
                </div>
                @if(Model.WorkHours is not null)
                {
                    @foreach (var schedule in Model.WorkHours.WeeklyHours.OrderBy(x => x.DayOfWeek).GroupBy(x => x.DayOfWeek))
                    {
                        <div class="modelWeeklyScheduleDayContainer">
                            <span class="modelWeeklyScheduleDay">@schedule.Key</span>
                            @foreach(var timespan in schedule.OrderBy(x => x.Start))
                            {
                                <span class="modelWeeklyScheduleTime">@timespan.Start.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat) - @timespan.End.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat)</span>
                            }
                        </div>
                    }
                    <span class="modelWeeklyScheduleNote">@Model.WorkHours.Note</span>
                }
            </div>

        </div>
        <div class="departmentPreviewDescription">
            @Model.Description
        </div>

        <div class="departmentPreviewMapContainer">
            <div id="@Model.Id" class="departmentPreviewMap" ></div>
        </div>

    </div>
}

<style>
    .departmentPreviewRibbonUniName {
        font-size: 120%;
        font-weight: 500;
    }

    .departmentPreviewRibbonHeartContainer {
        position: relative;
        width: 2rem;
        height: 2rem;
        padding: 0;
    }

    .departmentPreviewCategoryContainer {
        position: relative;
        display: flex;
        align-items: center;
        gap: @LargeGap;
    }

    .departmentPreviewCategory {
        font-weight: 700;
    }

    .departmentPreviewDescription {
        grid-column-start: 1;
        grid-column-end: 3;
        position: relative;
        display: flex;
        padding: @LargePadding;
    }

    .departmentPreviewMapContainer {
        grid-row-start: 1;
        grid-column-start: 2;
        grid-column-end: 3;
        position: relative;
        margin-top: 104px;
        width: 100%;
        height: fit-content;
        display: flex;
        padding: @LargePadding;
        z-index: 1;
    }

    .departmentPreviewMap {
        position: relative;
        width: 100%;
        height: 320px;
        border-radius: @LargeBorderRadius;
        border: solid 1px @Gray.NormalizedColor();
    }


    @@media screen and (max-width: 1060px) {

        .departmentPreviewContainer .modelContainer {
            grid-template-columns: 1fr 1fr;
        }
    }


    @@media screen and (max-width: 800px) {
        .modelContainer.departmentPreviewContainer {
            grid-template-columns: 100%;
        }

        .departmentPreviewContainer .modelRibbonInfo {
            font-size: 112%;
        }

        .departmentPreviewRibbonUniName {
            font-size: 100%;
        }

        .departmentPreviewMapContainer {
            grid-row-start: 3;
            grid-column-start: 1;
            grid-column-end: 2;
            top:0px;
        }

        .departmentPreviewRibbonHeartContainer {
            width: 2rem;
            height: 2rem;
            
        }

        .departmentPreviewContainer .modelRibbonContainer {
            grid-template-columns: 160px 1fr;
        }

        .departmentPreviewContainer .modelImageContainer {
            width: 160px;
            height: 160px;
        }
    }

    @@media screen and (max-width: 550px) {
        .departmentPreviewContainer .modelImageContainer {
            bottom: 32px;
            width: 132px;
            height: 132px;
        }

        .departmentPreviewContainer .modelRibbonContainer {
            grid-template-columns: 132px 1fr;
        }

        .departmentPreviewContainer .modelWeeklyScheduleContainer {
            grid-template-columns: 1fr 1fr ;
        }

        .departmentPreviewContainer .modelRibbonInfo {
            font-size: 100%;
        }

        .departmentPreviewRibbonUniName {
            font-size: 92%;
        }

        .departmentPreviewCategory {
            font-size: 92%;
        }

        .departmentPreviewContainer .modelWeeklyScheduleContainer {
            font-size: 92%;
        }

        .departmentPreviewDescription {
            font-size: 88%;
        }
    }

    @@media screen and (max-width: 450px) {

        .modelEmptySpace {
            display: none;
        }

        .departmentPreviewContainer .modelImageContainer {
            bottom: 0px;
            width: 100px;
            height: 100px;
        }

        .departmentPreviewContainer .modelRibbonContainer {
            grid-template-columns: 100%;
        }
    }
    

</style>