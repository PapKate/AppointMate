@using static MeetBase.Blazor.PaletteColors
@using static MeetBase.Blazor.Personalization
@using static MeetBase.Blazor.CssVariables

@namespace MeetBase.Blazor

<div class="scheduleHeaderContainer">
    <span>@mFirstDateOfWeek.GetMonthName() @mFirstDateOfWeek.Year</span>

    <div class="scheduleHeaderNavButtonsContainer">
        <IconButton VectorSource="@IconPaths.ChevronLeftPath" 
                    OnClick="@(() => mFirstDateOfWeek = mFirstDateOfWeek.AddDays(-7))"
                    ForeColor="@Gray" 
                    BackColor="transparent" 
                    BoxShadow="none"/>
        <IconButton VectorSource="@IconPaths.ChevronRightPath" 
                    OnClick="@(() => mFirstDateOfWeek = mFirstDateOfWeek.AddDays(7))"
                    ForeColor="@Gray"
                    BackColor="transparent" 
                    BoxShadow="none" />
        @if(IsEditable)
        {
            <IconButton VectorSource="@IconPaths.PencilOutlinePath"
                        OnClick="@(async () => await EditButtonOnClick.InvokeAsync())"
                        ForeColor="@Gray"
                        BackColor="transparent"
                        BorderRadius="@SmallBorderRadius"
                        BoxShadow="none" />
        }
    </div>
</div>

<div class="separator"></div>

<div class="scheduleContainer">
    @if(mWeekDays is not null)
    {   
        <div class="timeContainer">
            <span class="timeHeaderData"></span>
            @for (var hour = TimeStart.Hour; hour <= TimeEnd.Hour; hour++)
            {
                <span class="timeTableData">@hour.ToString().PadLeft(2, '0') : 00</span>
            }
        </div>
        <table class="schedule">
            <thead>
                <tr>
                    @{
                        mDisplayedFirstDateOfWeek = mFirstDateOfWeek;
                    }
                    @foreach (var day in mWeekDays)
                    {
                        <th>
                            <div class="scheduleHeaderDay">
                                <span class="scheduleHeaderDayText ">@day.ToShortDayOfWeekName()</span>
                                <span class="scheduleHeaderDayCircle @GetCssClassForDate(mDisplayedFirstDateOfWeek)">@mDisplayedFirstDateOfWeek.Day</span>
                            </div>
                        </th>
                        mDisplayedFirstDateOfWeek = mDisplayedFirstDateOfWeek.AddDays(1);
                    }
                </tr>
            </thead>
            <tbody>
                @for (var hour = TimeStart.Hour; hour <= TimeEnd.Hour - 1; hour++)
                {
                    <tr>
                        @foreach (var day in mWeekDays)
                        {
                            <td class="scheduleTableCell"></td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <div class="workHoursContainer">
            @if ((mCurrentDate.DayOfWeek == DayOfWeek.Sunday ? mCurrentDate.AddDays(-6).GetFirstDayOfWeek().ToDateOnly() : mCurrentDate.GetFirstDayOfWeek().ToDateOnly()) == mFirstDateOfWeek.ToDateOnly()
            && mCurrentDate > mCurrentDate.Date.AddHours(7) && mCurrentDate < mCurrentDate.Date.AddHours(22))
            {
                <span class="workHourContainer scheduleCurrentDateTimePointer" style="@TopVariable.SetCssVariable($"calc({CellHeight} * ({mCurrentDate.Hour}.{mCurrentDate.Minute * 1 / 6} - 7))")
                                    @LeftVariable.SetCssVariable($"calc((100% / 7) * ({(mCurrentDate.DayOfWeek == DayOfWeek.Sunday ? 7 : (int)mCurrentDate.DayOfWeek)} - 1))")
                                    @HeightVariable?.SetCssVariable("2px")
                                    @BackgroundVariable.SetCssColor($"{Green.HexToRGBA(1)}")
                                    @BorderBrushVariable.SetCssColor($"none")">
                </span>
            }

            @if (WeeklySchedule is not null && !WeeklySchedule.WeeklyHours.IsNullOrEmpty())
            {
                @foreach (var workHour in WeeklySchedule.WeeklyHours)
                {
                    <div class="workHourContainer"
                         style="@TopVariable.SetCssVariable($"calc({CellHeight} * ({workHour.Start.Hour}.{workHour.Start.Minute * 1 / 6} - 7))")
                                @LeftVariable.SetCssVariable($"calc((100% / 7) * ({(workHour.DayOfWeek == DayOfWeek.Sunday ? 7 : (int)workHour.DayOfWeek)} - 1))")
                                @HeightVariable?.SetCssVariable($"calc({CellHeight} * ({workHour.End.Hour}.{workHour.End.Minute * 1 / 6} - {workHour.Start.Hour}.{workHour.Start.Minute * 1 / 6}))")
                                @BackgroundVariable.SetCssColor($"{WeeklySchedule.Color.HexToRGBA(0.2)}")
                                @BorderBrushVariable.SetCssColor($"{WeeklySchedule.Color}")"
                         id="@($"{workHour.DayOfWeek}.{workHour.Start.ToString(FormatConstants.TimeFormat)}-{workHour.End.ToString(FormatConstants.TimeFormat)}")">
                        
                        <span class="workHourName">@WeeklySchedule.Name</span>
                        <span class="workHourLocation">@workHour.Text</span>
                    </div>
                }
            }
            @if (!Lectures.IsNullOrEmpty())
            {
                @foreach (var lecture in Lectures)
                {
                    @foreach(var hourRange in lecture.WeeklyHours)
                    {
                        <div class="workHourContainer"
                             style="@TopVariable.SetCssVariable($"calc({CellHeight} * ({hourRange.Start.Hour}.{hourRange.Start.Minute.ToString("00")} - 7))")
                                    @LeftVariable.SetCssVariable($"calc((100% / 7) * ({(hourRange.DayOfWeek == DayOfWeek.Sunday ? 7 : (int)hourRange.DayOfWeek)} - 1))")
                                    @HeightVariable.SetCssVariable($"calc({CellHeight} * ({hourRange.End.Hour}.{hourRange.End.Minute * 1 / 6} - {hourRange.Start.Hour}.{hourRange.Start.Minute * 1 / 6}))")
                                    @BackgroundVariable.SetCssColor($"{lecture.Color.HexToRGBA(0.2)}")
                                    @BorderBrushVariable.SetCssColor($"{lecture.Color}")
                                    "
                             id="@($"{hourRange.DayOfWeek}.{hourRange.Start.ToString(FormatConstants.TimeFormat)}-{hourRange.End.ToString(FormatConstants.TimeFormat)}")">
                            <span class="workHourName">@lecture.Name</span>
                            <span class="workHourLocation">@hourRange.Text</span>
                        </div>
                    }
                }
            }
        </div>
    }
</div>

<style>

    .scheduleHeaderContainer {
        position: relative;
        width: 100%;
        padding: @NormalPadding @XXLargePadding;
        display: flex;
        justify-content: space-between;
        font-size: 112%;
    }

    .scheduleHeaderNavButtonsContainer {
        position: relative;
        display:flex;
        height: 32px;
    }

        .scheduleHeaderNavButtonsContainer .baseButton {
            padding: 0;
        }

    .separator {
        position: relative;
        margin: auto;
        width: 98%;
        height: 1px;
        background-color: @LightGray.NormalizedColor();
    }

    .scheduleContainer {
        position: relative;
        width: 100%;
        height: fit-content;
        display: flex;
        padding: 1rem;
    }

    .timeContainer {
        position: relative;
        top: 4px;
        width: 3rem;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content:space-between;
        align-items: center;
        font-size: 8px;
    }

    .timeHeaderData {
        height: 28px;
    }

    .timeTableData {
    }

    .schedule {
        position: relative;
        width: 100%;
        border-collapse: collapse;
    }

    .schedule td {
        padding: @NormalPadding;
        border: solid 1px @LightGray.NormalizedColor();
        text-align: center;
    }

    .schedule th {
        text-align: center;
        padding: @NormalPadding;
    }

    .timeTableHead {
        width: 5rem;
    }

    .scheduleHeaderDay {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: @SmallGap;
    }

    .scheduleHeaderDayText {
        position: relative;
        font-size: 60%;
        font-weight: 400;
        color: @Gray.NormalizedColor();
        text-transform: uppercase;
    }

    .scheduleHeaderDayCircle {
        position: relative;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 140%;
        border-radius: @CircleBorderRadius;
    }

    .scheduleToday {
        background-color: @((PointerColor ?? Amber).NormalizedColor());
        color: @White.NormalizedColor();
    }

    .scheduleBeforeToday {
        color: @Gray.NormalizedColor();
    }

    .scheduleAfterToday {
        color: @DarkGray.NormalizedColor();
    }

    .workHoursContainer {
        position: absolute;
        top: 88px;
        left: calc(4rem - 1px);
        width: calc(100% - 5rem + 1px);
    }

    .workHourContainer {
        position: absolute;
        top: @TopVariable.GetCssVariable();
        left: @LeftVariable.GetCssVariable();
        width: calc(100% / 7);
        height: @HeightVariable.GetCssVariable();
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: @MediumGap;
        text-align: center;
        background-color: @BackgroundVariable?.GetCssVariable();
        border: solid 1px;
        border-color: @BorderBrushVariable?.GetCssVariable();
    }

    .workHourLocation {
        font-size: 88%;
    }

    .scheduleCurrentDateTimePointer {
        border: none;
    }

    .scheduleCurrentDateTimePointer:before {
        content: '🞂';
        position: absolute;
        left: -4px;
        font-size: 1rem;
        color: @Green.NormalizedColor();
    }

    .scheduleTableCell {
        height: @CellHeight;
    }

    </style>