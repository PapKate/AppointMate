@using static MeetBase.Blazor.PaletteColors
@using static MeetBase.Blazor.CssVariables

@using static MeetBase.Blazor.Personalization

@namespace MeetEdu

@if(Model is not null && Model.User is not null)
{
    <div class="professorContainer" style="@SetStyle()" @onclick="@ProfessorContainer_OnClick">

        <div class="professorRibbonContainer" style="@BackgroundVariable.SetCssColor(Model.User.Color) @ForegroundVariable.SetCssColor(Model.User.Color.DarkOrWhite())">
            <div></div>
            <div class="modelRibbon">
                <div class="modelRibbonInfoContainer">@Model.User.FirstName @Model.User.LastName</div>
            </div>
        </div>

        <div class="professorInfoContainer">
            <div class="professorHeaderContainer">
                <span>@Model.Rank.ToString().BreakWords()</span>
                <IconButton BackColor="transparent"
                            ForeColor="@Model.User.Color"
                            VectorSource="@IconPaths.HeartOutlinePath"
                            HasAnimation="false"
                            BoxShadow="none"
                            Style="display:none;"
                            CssClasses="professorRibbonHeartContainer" />
            </div>
            <div class="professorImageAndContactContainer">
                <div class="professorImageContainer">
                    <ImageWithFallbackVector CssClasses="modelImage"
                                           ImageSource="@Model.User!.ImageUrl?.ToString()"
                                           AspectRatio="1 / 1"
                                           VectorType="@typeof(AvatarVector)"
                                           FallbackIconColor="@Model.User.Color"
                                           FallbackIconMargin="1rem"
                                           AlternateText="@Model.User.Username" />
                </div>
                <div class="modelContactContainer">
                    <div class="modelContactImage">
                        <CallVector Color="@Model.User.Color" />
                    </div>
                    <span class="modelContactValue">@Model.User.PhoneNumber?.ToE164PhoneNumberString()</span>

                    <div class="modelContactImage">
                        <EmailVector Color="@Model.User.Color" />
                    </div>
                    <span class="modelContactValue">@Model.User.Email</span>
                </div>
            </div>
            <div class="professorPositionContainer">
                <span class="modelWeeklyScheduleTitle" style="@ForegroundVariable.SetCssColor(Model.User.Color)">Department</span>
                <span class="professorPosition">Computer Engineering & Informatics</span>
                <span class="modelWeeklyScheduleTitle" style="margin-top: 4px; @ForegroundVariable.SetCssColor(Model.User.Color)">Field</span>
                <span class="professorPosition" style="text-align:center;">@Model.Field</span>
            </div>
            <div class="professorWeeklyScheduleContainer">
                <div class="modelWeeklySchedule">
                    <span class="modelWeeklyScheduleTitle" style="@ForegroundVariable.SetCssColor(Model.User.Color)">Schedule</span>
                </div>
                @if (Model.WeeklySchedule is not null)
                {
                    @foreach (var schedule in Model.WeeklySchedule.WeeklyHours.OrderBy(x => x.DayOfWeek).GroupBy(x => x.DayOfWeek))
                    {
                        <div class="modelWeeklyScheduleDayContainer">
                            <span class="modelWeeklyScheduleDay">@schedule.Key</span>
                            @foreach (var timespan in schedule.OrderBy(x => x.Start))
                            {
                                <span class="modelWeeklyScheduleTime">@timespan.Start.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat) - @timespan.End.ToFormatedString(TimeOnlyExtensions.ShortTimeFormat)</span>
                            }
                        </div>
                    }
                    <span class="professorWeeklyScheduleNote">@Model.WeeklySchedule.Note</span>
                }
            </div>
        </div>
    </div>
}

<style>
    .professorContainer {
        position: relative;
        width: 100%;
        height: auto;
        min-width: 420px;
        display: grid;
        grid-template-columns: 1fr;
        padding: @NormalPadding;
        border-radius: @VeryLargeBorderRadius;
        border: solid 1px @BorderBrushVariable.GetCssVariable();
    }

    .professorHeaderContainer {
        position: absolute;
        width: 100%;
        height: 40px;
        display: flex;
        justify-content: space-between;
        align-items:center;
        gap: @LargeGap;
        padding-left: 176px;
        background: @BackgroundVariable.GetCssVariable();
        color: @ForegroundVariable.GetCssVariable();
    }

    .professorRibbonContainer {
        position: absolute;
        width: 100%;
        height: 48px;
        top: 50px;
        display: grid;
        grid-template-columns: 160px 1fr;
        gap: @VeryLargeGap;
        padding: @NormalPadding;
        background: @BackgroundVariable.GetCssVariable();
        color: @ForegroundVariable.GetCssVariable();
        font-size: 120%;
        font-weight: 600;
        filter: @LightFilterDropShadow;
    }

    .professorImageAndContactContainer {
        position: relative;
        height: 160px;
        display: flex;
        align-items: flex-end;
        justify-content: flex-start;
        gap: @LargeGap;
    }

    .professorImageContainer {
        position: relative;
        width: 160px;
        height: 160px;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 0;
        background: @White.NormalizedColor();
        filter: @LightFilterDropShadow;
        border-radius: @LargeBorderRadius;
        border: solid 1px @BorderBrushVariable.GetCssVariable();
        overflow: hidden;
    }

    .professorInfoContainer {
        position: relative;
        width: 100%;
        height: fit-content;
        display: flex;
        flex-direction: column;
    }

    .professorRibbonHeartContainer {
        position: relative;
        width: 2rem;
        height: 2rem;
        padding: 0;
    }

    .professorPositionContainer {
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: @VeryLargePadding @VeryLargePadding 0 @VeryLargePadding;
    }

    .professorPosition {
        text-align: right;
    }

    .professorWeeklyScheduleContainer {
        position: relative;
        display: grid;
        grid-template-columns: 1fr 3fr;
        gap: @MediumGap @VeryLargeGap;
        padding: @VeryLargePadding;
    }

    .professorWeeklyScheduleNote {
        grid-column-start: 1;
        grid-column-end: 3;
        font-size: 92%;
    }

    @@media screen and (max-width: 440px) {

        .modelImageAndContactContainer {
            height: 160px;
        }

        .professorContainer {
            min-width: 360px;
            width: 360px;
            font-size: 90%;
        }

        .professorHeaderContainer {
            gap: @LargeGap;
            padding-left: 140px;
        }

        .professorRibbonContainer {
            grid-template-columns: 132px 1fr;
        }

        .professorImageContainer {
            width: 120px;
            height: 120px;
        }

        .professorPositionContainer {
            padding: @LargePadding @LargePadding 0 @LargePadding;
        }

        .professorWeeklyScheduleContainer {
            gap: @MediumGap @LargeGap;
            padding: @LargePadding;
        }
    }

</style>